<?php

namespace App\Http\Controllers;

use App\Charts\DailyAbsentChart;
use App\Charts\MinutesAbsentChart;
use App\Charts\MonthlyAbsentChart;
use App\Charts\TestingAbsenChart;
use App\Charts\WeeklyAbsentChart;
use App\Models\AttLogArchive;
use App\Models\ShiftArchive;
use App\Models\TestingAbsen;
use App\Models\TestingArchive;
use App\Models\TestingKitaServer;
use App\Models\User;
use App\Models\MasterShift;
use Carbon\Carbon;
use Carbon\CarbonPeriod;
use DB;
use Illuminate\Http\Request;
use Redirect;
use PDF;
use Mail;
use Alert;
use DateTime;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Collection;
use Auth;

class TestingAbsenController extends Controller
{
    // Kehadiran All Emp

    // Ini Diubah
    public function index(Request $request)
    {
        $userDept = Auth::user()->dept;

        if ($userDept == 'HR Legal' || $userDept == 'BSKP') {
            // $data = DB::table('users')->get();
            $data = DB::table('users')->where('active', 'yes')->get();
        } else {
            // $data = DB::table('users')->where('active', '!=', 'no')->where('dept', $userDept)->get();
            $data = DB::table('users')->where('dept', $userDept)->where('active', 'yes')->get();
        }

        return view('admin.pages.testing.index', compact('data'));
    }

    public function index_month(Request $request)
    {

        $userDept = Auth::user()->dept;

        if ($userDept == 'HR Legal' || $userDept == 'BSKP') {
            // $data = DB::table('users')->where('active', '!=', 'no')->get();
            $data = DB::table('users')->get();
        } else {
            // $data = DB::table('users')->where('active', '!=', 'no')->where('dept', $userDept)->get();
            $data = DB::table('users')->where('dept', $userDept)->get();
        }

        return view('admin.pages.testing.index_month', compact('data'));
    }

    public function view($nik)
    {
        $year = TestingAbsen::where('user_id', $nik)
            ->selectRaw('YEAR(date) as year')
            ->distinct()
            ->get();

        $dateNow = Carbon::now();
        // $dateNow = '2024-03-31';
        $month = Carbon::parse($dateNow)->format('m');
        $yearNow = Carbon::parse($dateNow)->format('Y');
        // $firstDay = Carbon::parse($dateNow)->firstOfMonth()->format('Y-m-d');
        // $lastDay = Carbon::parse($dateNow)->endOfMonth()->format('Y-m-d');
        $firstDay = $dateNow->firstOfMonth()->format('Y-m-d');
        $lastDay = $dateNow->endOfMonth()->format('Y-m-d');
        // $firstDay = '2024-01-01';
        // $lastDay = '2024-02-29';

        $period = CarbonPeriod::create($firstDay, $lastDay);
        foreach ($period as $date) {
            $dates[] = $date->format('Y-m-d');
        }

        $emp = User::where('nik', $nik)
            ->with([
                'absen_reg_test' => function ($query) use ($month, $yearNow) {
                    $query->whereMonth('date', $month);
                    $query->whereYear('date', $yearNow);
                }
            ])

            ->select('users.*')
            ->first();

        $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
        $totalDaysWithData = $totalDays->count();
        $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
            ->where(function ($query) {
                $query->orWhereNull('desc')
                    ->orWhere('desc', '!=', 'MX');
            })
            ->whereBetween('date', [$firstDay, $lastDay])
            ->get();

        $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

        $emp1 = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'test_absen_regs.info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'users.dept',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work_info as masuk_mesin',
                'test_absen_regs.end_work_info as pulang_mesin',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                'test_absen_regs.info',
                'test_absen_regs.hadir',
                DB::raw("(SUM(HOUR(timediff(test_absen_regs.end_work, test_absen_regs.start_work)))) as tjkx"),
                DB::raw("(SUM(MINUTE(timediff(test_absen_regs.end_work, test_absen_regs.start_work)))) as tjkm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $emp1_total = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                'test_absen_regs.hadir',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir = 0 then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->addSelect(DB::raw("SUM(test_absen_regs.hadir = '1') as hadir"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->first();

        // dd($emp1_total->hadir);

        $totalLateHour = $emp1_total->tolh;
        $totalLateMinute = $emp1_total->tolm;
        $totalLateMinutetoHour = $totalLateMinute / 60;
        $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

        return view('admin.pages.testing.testing-detail', [
            'emp' => $emp,
            'emp1' => $emp1,
            'emp1_total' => $emp1_total,
            'totalDaysWithData' => $totalDaysWithData,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totalLateHourEnd' => $totalLateHourEnd,
            'year' => $year,
            'dates' => $dates,
            'totalDaysWithoutMXData' => $totalDaysWithoutMXData
        ]);
    }

    public function view_filter(Request $request)
    {
        $nik = $request->nik;
        $firstDay = $request->from;
        $lastDay = $request->to;

        $year = TestingAbsen::where('user_id', $nik)
            ->selectRaw('YEAR(date) as year')
            ->distinct()
            ->get();

        $emp = User::where('nik', $nik)->with([
            'absen_reg_test' => function ($query) use ($firstDay, $lastDay) {
                $query->whereBetween('date', [$firstDay, $lastDay]);
            }
        ])->first();

        $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
        $totalDaysWithData = $totalDays->count();
        $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
            ->where(function ($query) {
                $query->orWhereNull('desc')
                    ->orWhere('desc', '!=', 'MX');
            })
            ->whereBetween('date', [$firstDay, $lastDay])
            ->get();

        $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

        $emp1 = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'test_absen_regs.info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                'test_absen_regs.hadir',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $emp1_total = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                'test_absen_regs.hadir',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir IS NULL then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->addSelect(DB::raw("SUM(test_absen_regs.hadir = '1') as hadir"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->first();

        $totalLateHour = $emp1->sum('tolh');
        $totalLateMinute = $emp1->sum('tolm');
        $totalLateMinutetoHour = $totalLateMinute / 60;
        $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

        return view('admin.pages.testing.testing-detail', [
            'emp' => $emp,
            'emp1' => $emp1,
            'emp1_total' => $emp1_total,
            'totalDaysWithData' => $totalDaysWithData,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totalLateHourEnd' => $totalLateHourEnd,
            'year' => $year,
            'totalDaysWithoutMXData' => $totalDaysWithoutMXData
        ]);
    }

    public function view_month($nik)
    {
        $year = TestingAbsen::where('user_id', $nik)
            ->selectRaw('YEAR(date) as year')
            ->distinct()
            ->get();
        $dateNow = Carbon::now();
        $month = Carbon::parse($dateNow)->format('m');
        $yearNow = Carbon::parse($dateNow)->format('Y');
        $firstDay = $dateNow->firstOfYear()->format('Y-m-d');
        $lastDay = $dateNow->endOfYear()->format('Y-m-d');

        $emp = User::where('users.nik', $nik)
            ->with([
                'absen_reg_test' => function ($query) use ($month, $yearNow) {
                    $query->whereMonth('date', $month)
                        ->whereYear('date', $yearNow);
                }
            ])
            ->select('users.*')
            ->first();

        $period = CarbonPeriod::create($firstDay, $lastDay);

        $totalDaysWithData = 0;

        $data = TestingAbsen::whereBetween('date', [$firstDay, $lastDay])->get();

        foreach ($period as $date) {
            $dateStr = $date->format('Y-m-d');

            if ($date->dayOfWeek != 6 && $date->dayOfWeek != 0) {
                $hasData = $data->contains('date', $dateStr);

                if ($hasData) {
                    $totalDaysWithData++;
                }
            }
        }

        $emp->totalDaysWithData = $totalDaysWithData;

        $totals = [];

        for ($month = 1; $month <= 12; $month++) {
            $monthName = date("F", mktime(0, 0, 0, $month, 1));

            $emp1_total = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('test_absen_regs.date', $month)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $totalHMonth = $emp1_total->sum('h');
            $totalLMonth = $emp1_total->sum('l');
            $totalTAMonth = $emp1_total->sum('ta');
            $totalDMonth = $emp1_total->sum('d');
            $totalMMonth = $emp1_total->sum('m');
            $totalMXMonth = $emp1_total->sum('mx');
            $totalSMonth = $emp1_total->sum('s');
            $totalSXMonth = $emp1_total->sum('sx');
            $totalIMonth = $emp1_total->sum('i');
            $totalIPMonth = $emp1_total->sum('ip');
            $totalIXMonth = $emp1_total->sum('ix');
            $totalCTMonth = $emp1_total->sum('ct');
            $totalCHMonth = $emp1_total->sum('ch');
            $totalCBMonth = $emp1_total->sum('cb');
            $totalCLMonth = $emp1_total->sum('cl');

            $totalLateMonthHour = $emp1_total->sum('tolh');
            $totalLateMonthMinute = $emp1_total->sum('tolm');
            $totalLateMonthMinutetoHour = $totalLateMonthMinute / 60;
            $totalLateMonthHourEnd = $totalLateMonthHour += $totalLateMonthMinutetoHour;

            $totalOTMonthHour = $emp1_total->sum('toth');
            $totalOTMonthMinute = $emp1_total->sum('totm');
            $totalOTMonthMinutetoHour = $totalOTMonthMinute / 60;
            $totalOTMonthHourEnd = $totalOTMonthHour += $totalOTMonthMinutetoHour;

            $emp1_total_year = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $totalHYear = $emp1_total_year->sum('h');
            $totalLYear = $emp1_total_year->sum('l');
            $totalTAYear = $emp1_total_year->sum('ta');
            $totalDYear = $emp1_total_year->sum('d');
            $totalMYear = $emp1_total_year->sum('m');
            $totalMXYear = $emp1_total_year->sum('mx');
            $totalSYear = $emp1_total_year->sum('s');
            $totalSXYear = $emp1_total_year->sum('sx');
            $totalIYear = $emp1_total_year->sum('i');
            $totalIPYear = $emp1_total_year->sum('ip');
            $totalIXYear = $emp1_total_year->sum('ix');
            $totalCTYear = $emp1_total_year->sum('ct');
            $totalCHYear = $emp1_total_year->sum('ch');
            $totalCBYear = $emp1_total_year->sum('cb');
            $totalCLYear = $emp1_total_year->sum('cl');

            $totalLateYearHour = $emp1_total_year->sum('tolh');
            $totalLateYearMinute = $emp1_total_year->sum('tolm');
            $totalLateYearMinutetoHour = $totalLateYearMinute / 60;
            $totalLateYearHourEnd = $totalLateYearHour += $totalLateYearMinutetoHour;

            $totalOTYearHour = $emp1_total_year->sum('toth');
            $totalOTYearMinute = $emp1_total_year->sum('totm');
            $totalOTYearMinutetoHour = $totalOTYearMinute / 60;
            $totalOTYearHourEnd = $totalOTYearHour += $totalOTYearMinutetoHour;

            $mandatoryAttendance = DB::table('users')
                ->join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('master_shifts.start_work', 'shift_archives.start_date', 'shift_archives.end_date')
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('shift_archives.start_date', $month)
                ->whereYear('shift_archives.start_date', $yearNow)
                ->get();

            $dateTimeRange = [];

            for ($j = 0; $j < count($mandatoryAttendance); $j++) {
                $actualTime = Carbon::parse($mandatoryAttendance[$j]->start_work);
                $actualDateStart = Carbon::parse($mandatoryAttendance[$j]->start_date);
                $actualDateEnd = Carbon::parse($mandatoryAttendance[$j]->end_date);

                $daysInRange = $actualDateStart->diffInDays($actualDateEnd);

                for ($day = 0; $day <= $daysInRange; $day++) {
                    $currentDate = $actualDateStart->copy()->addDays($day);
                    $dateTimeRange[] = $currentDate->setTimeFrom($actualTime);
                }
            }

            $attendanceRecords = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('test_absen_regs.start_work as absen_time')
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('test_absen_regs.date', $month)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->where('test_absen_regs.desc', '=', 'L')
                ->get();

            $selisihMenit = [];

            foreach ($attendanceRecords as $absen) {
                $absenTime = Carbon::parse($absen->absen_time);

                foreach ($dateTimeRange as $dateTime) {
                    if ($absenTime->isSameDay($dateTime)) {
                        $selisihWaktu = $absenTime->diffInMinutes($dateTime);
                        $selisihMenit[] = $selisihWaktu / 60;
                        break;
                    }
                }
            }

            $totalSelisihMenit = array_sum($selisihMenit);

            // Total Late in Year

            $mandatoryAttendanceYear = DB::table('users')
                ->join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('master_shifts.start_work', 'shift_archives.start_date', 'shift_archives.end_date')
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('shift_archives.start_date', $yearNow)
                ->get();

            $dateTimeRangeYear = [];

            for ($j = 0; $j < count($mandatoryAttendanceYear); $j++) {
                $actualTime = Carbon::parse($mandatoryAttendanceYear[$j]->start_work);
                $actualDateStart = Carbon::parse($mandatoryAttendanceYear[$j]->start_date);
                $actualDateEnd = Carbon::parse($mandatoryAttendanceYear[$j]->end_date);

                $daysInRange = $actualDateStart->diffInDays($actualDateEnd);

                for ($day = 0; $day <= $daysInRange; $day++) {
                    $currentDate = $actualDateStart->copy()->addDays($day);
                    $dateTimeRangeYear[] = $currentDate->setTimeFrom($actualTime);
                }
            }

            $attendanceRecordsYear = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('test_absen_regs.start_work as absen_time')
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->where('test_absen_regs.desc', '=', 'L')
                ->get();

            $selisihMenitYear = [];

            foreach ($attendanceRecordsYear as $absen) {
                $absenTime = Carbon::parse($absen->absen_time);

                foreach ($dateTimeRangeYear as $dateTime) {
                    if ($absenTime->isSameDay($dateTime)) {
                        $selisihWaktu = $absenTime->diffInMinutes($dateTime);
                        $selisihMenitYear[] = $selisihWaktu / 60;
                        break;
                    }
                }
            }

            $totalSelisihMenitYear = array_sum($selisihMenitYear);

            $totals[$monthName] = [
                'HYear' => $totalHYear,
                'LYear' => $totalLYear,
                'TAYear' => $totalTAYear,
                'DYear' => $totalDYear,
                'MYear' => $totalMYear,
                'MXYear' => $totalMXYear,
                'SYear' => $totalSYear,
                'SXYear' => $totalSXYear,
                'IYear' => $totalIYear,
                'IPYear' => $totalIPYear,
                'IXYear' => $totalIXYear,
                'CTYear' => $totalCTYear,
                'CHYear' => $totalCHYear,
                'CBYear' => $totalCBYear,
                'CLYear' => $totalCLYear,
                'HMonth' => $totalHMonth,
                'LMonth' => $totalLMonth,
                'TAMonth' => $totalTAMonth,
                'DMonth' => $totalDMonth,
                'MMonth' => $totalMMonth,
                'MXMonth' => $totalMXMonth,
                'SMonth' => $totalSMonth,
                'SXMonth' => $totalSXMonth,
                'IMonth' => $totalIMonth,
                'IPMonth' => $totalIPMonth,
                'IXMonth' => $totalIXMonth,
                'CTMonth' => $totalCTMonth,
                'CHMonth' => $totalCHMonth,
                'CBMonth' => $totalCBMonth,
                'CLMonth' => $totalCLMonth,
                'totalOTMonthHourEnd' => $totalOTMonthHourEnd,
                'totalOTYearHourEnd' => $totalOTYearHourEnd,
                'totalLateMonthHourEnd' => $totalLateMonthHourEnd,
                'totalLateYearHourEnd' => $totalLateYearHourEnd,
                'totalLateMonthHour' => $totalLateMonthHour,
                'totalLateMonthMinute' => $totalLateMonthMinute,
            ];

        }

        $emp1 = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work',
                'test_absen_regs.end_work',
                'test_absen_regs.desc',
                DB::raw("(SUM(time_to_sec(timediff(test_absen_regs.end_work, test_absen_regs.start_work))/3600)) as result"),
                DB::raw("(SUM(time_to_sec(timediff(master_shifts.end_work, master_shifts.start_work))/3600)) as shift"),
            )
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $totalHours = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNot('test_absen_regs.desc', 'TA')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->value('result');

        $totalOT = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNotNull('test_absen_regs.end_work')
            ->whereTime('test_absen_regs.start_work', '<', '09:00:00')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->groupBy('test_absen_regs.date')
            ->get();

        $totalOTs = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNotNull('test_absen_regs.end_work')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->value('result');

        $qty = $totalOT->count();
        $tot = 8 * $qty;
        $rr = $totalOTs - $tot;

        return view('admin.pages.testing.testing-detail-month', [
            'emp' => $emp,
            'emp1' => $emp1,
            'totalDaysWithData' => $totalDaysWithData,
            'totalHours' => $totalHours,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totals' => $totals,
            'emp1_total' => $emp1_total,
            'year' => $year
        ]);
    }

    public function view_month_filter(Request $request)
    {
        $nik = $request->nik;
        $yearNow = $request->year;
        $year = TestingAbsen::where('user_id', $nik)
            ->selectRaw('YEAR(date) as year')
            ->distinct()
            ->get();
        $dateNow = Carbon::now();
        $month = Carbon::parse($dateNow)->format('m');
        // $yearNow = Carbon::parse($dateNow)->format('Y');
        $firstDay = $dateNow->firstOfYear()->format('Y-m-d');
        $lastDay = $dateNow->endOfYear()->format('Y-m-d');

        $emp = User::where('users.nik', $nik)
            ->with([
                'absen_reg_test' => function ($query) use ($month, $yearNow) {
                    $query->whereMonth('date', $month)
                        ->whereYear('date', $yearNow);
                }
            ])
            ->select('users.*')
            ->first();

        $period = CarbonPeriod::create($firstDay, $lastDay);

        $totalDaysWithData = 0;

        $data = TestingAbsen::whereBetween('date', [$firstDay, $lastDay])->get();

        foreach ($period as $date) {
            $dateStr = $date->format('Y-m-d');

            if ($date->dayOfWeek != 6 && $date->dayOfWeek != 0) {
                $hasData = $data->contains('date', $dateStr);

                if ($hasData) {
                    $totalDaysWithData++;
                }
            }
        }

        $emp->totalDaysWithData = $totalDaysWithData;

        $totals = [];

        for ($month = 1; $month <= 12; $month++) {
            $monthName = date("F", mktime(0, 0, 0, $month, 1));

            $emp1_total = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('test_absen_regs.date', $month)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $totalHMonth = $emp1_total->sum('h');
            $totalLMonth = $emp1_total->sum('l');
            $totalTAMonth = $emp1_total->sum('ta');
            $totalDMonth = $emp1_total->sum('d');
            $totalMMonth = $emp1_total->sum('m');
            $totalMXMonth = $emp1_total->sum('mx');
            $totalSMonth = $emp1_total->sum('s');
            $totalSXMonth = $emp1_total->sum('sx');
            $totalIMonth = $emp1_total->sum('i');
            $totalIPMonth = $emp1_total->sum('ip');
            $totalIXMonth = $emp1_total->sum('ix');
            $totalCTMonth = $emp1_total->sum('ct');
            $totalCHMonth = $emp1_total->sum('ch');
            $totalCBMonth = $emp1_total->sum('cb');
            $totalCLMonth = $emp1_total->sum('cl');

            $totalLateMonthHour = $emp1_total->sum('tolh');
            $totalLateMonthMinute = $emp1_total->sum('tolm');
            $totalLateMonthMinutetoHour = $totalLateMonthMinute / 60;
            $totalLateMonthHourEnd = $totalLateMonthHour += $totalLateMonthMinutetoHour;

            $totalOTMonthHour = $emp1_total->sum('toth');
            $totalOTMonthMinute = $emp1_total->sum('totm');
            $totalOTMonthMinutetoHour = $totalOTMonthMinute / 60;
            $totalOTMonthHourEnd = $totalOTMonthHour += $totalOTMonthMinutetoHour;

            $emp1_total_year = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $totalHYear = $emp1_total_year->sum('h');
            $totalLYear = $emp1_total_year->sum('l');
            $totalTAYear = $emp1_total_year->sum('ta');
            $totalDYear = $emp1_total_year->sum('d');
            $totalMYear = $emp1_total_year->sum('m');
            $totalMXYear = $emp1_total_year->sum('mx');
            $totalSYear = $emp1_total_year->sum('s');
            $totalSXYear = $emp1_total_year->sum('sx');
            $totalIYear = $emp1_total_year->sum('i');
            $totalIPYear = $emp1_total_year->sum('ip');
            $totalIXYear = $emp1_total_year->sum('ix');
            $totalCTYear = $emp1_total_year->sum('ct');
            $totalCHYear = $emp1_total_year->sum('ch');
            $totalCBYear = $emp1_total_year->sum('cb');
            $totalCLYear = $emp1_total_year->sum('cl');

            $totalLateYearHour = $emp1_total_year->sum('tolh');
            $totalLateYearMinute = $emp1_total_year->sum('tolm');
            $totalLateYearMinutetoHour = $totalLateYearMinute / 60;
            $totalLateYearHourEnd = $totalLateYearHour += $totalLateYearMinutetoHour;

            $totalOTYearHour = $emp1_total_year->sum('toth');
            $totalOTYearMinute = $emp1_total_year->sum('totm');
            $totalOTYearMinutetoHour = $totalOTYearMinute / 60;
            $totalOTYearHourEnd = $totalOTYearHour += $totalOTYearMinutetoHour;

            $mandatoryAttendance = DB::table('users')
                ->join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('master_shifts.start_work', 'shift_archives.start_date', 'shift_archives.end_date')
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('shift_archives.start_date', $month)
                ->whereYear('shift_archives.start_date', $yearNow)
                ->get();

            $dateTimeRange = [];

            for ($j = 0; $j < count($mandatoryAttendance); $j++) {
                $actualTime = Carbon::parse($mandatoryAttendance[$j]->start_work);
                $actualDateStart = Carbon::parse($mandatoryAttendance[$j]->start_date);
                $actualDateEnd = Carbon::parse($mandatoryAttendance[$j]->end_date);

                $daysInRange = $actualDateStart->diffInDays($actualDateEnd);

                for ($day = 0; $day <= $daysInRange; $day++) {
                    $currentDate = $actualDateStart->copy()->addDays($day);
                    $dateTimeRange[] = $currentDate->setTimeFrom($actualTime);
                }
            }

            $attendanceRecords = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('test_absen_regs.start_work as absen_time')
                ->where('test_absen_regs.user_id', $nik)
                ->whereMonth('test_absen_regs.date', $month)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->where('test_absen_regs.desc', '=', 'L')
                ->get();

            $selisihMenit = [];

            foreach ($attendanceRecords as $absen) {
                $absenTime = Carbon::parse($absen->absen_time);

                foreach ($dateTimeRange as $dateTime) {
                    if ($absenTime->isSameDay($dateTime)) {
                        $selisihWaktu = $absenTime->diffInMinutes($dateTime);
                        $selisihMenit[] = $selisihWaktu / 60;
                        break;
                    }
                }
            }

            $totalSelisihMenit = array_sum($selisihMenit);

            // Total Late in Year

            $mandatoryAttendanceYear = DB::table('users')
                ->join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('master_shifts.start_work', 'shift_archives.start_date', 'shift_archives.end_date')
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('shift_archives.start_date', $yearNow)
                ->get();

            $dateTimeRangeYear = [];

            for ($j = 0; $j < count($mandatoryAttendanceYear); $j++) {
                $actualTime = Carbon::parse($mandatoryAttendanceYear[$j]->start_work);
                $actualDateStart = Carbon::parse($mandatoryAttendanceYear[$j]->start_date);
                $actualDateEnd = Carbon::parse($mandatoryAttendanceYear[$j]->end_date);

                $daysInRange = $actualDateStart->diffInDays($actualDateEnd);

                for ($day = 0; $day <= $daysInRange; $day++) {
                    $currentDate = $actualDateStart->copy()->addDays($day);
                    $dateTimeRangeYear[] = $currentDate->setTimeFrom($actualTime);
                }
            }

            $attendanceRecordsYear = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->select('test_absen_regs.start_work as absen_time')
                ->where('test_absen_regs.user_id', $nik)
                ->whereYear('test_absen_regs.date', $yearNow)
                ->where('test_absen_regs.desc', '=', 'L')
                ->get();

            $selisihMenitYear = [];

            foreach ($attendanceRecordsYear as $absen) {
                $absenTime = Carbon::parse($absen->absen_time);

                foreach ($dateTimeRangeYear as $dateTime) {
                    if ($absenTime->isSameDay($dateTime)) {
                        $selisihWaktu = $absenTime->diffInMinutes($dateTime);
                        $selisihMenitYear[] = $selisihWaktu / 60;
                        break;
                    }
                }
            }

            $totalSelisihMenitYear = array_sum($selisihMenitYear);

            $totals[$monthName] = [
                'HYear' => $totalHYear,
                'LYear' => $totalLYear,
                'TAYear' => $totalTAYear,
                'DYear' => $totalDYear,
                'MYear' => $totalMYear,
                'MXYear' => $totalMXYear,
                'SYear' => $totalSYear,
                'SXYear' => $totalSXYear,
                'IYear' => $totalIYear,
                'IPYear' => $totalIPYear,
                'IXYear' => $totalIXYear,
                'CTYear' => $totalCTYear,
                'CHYear' => $totalCHYear,
                'CBYear' => $totalCBYear,
                'CLYear' => $totalCLYear,
                'HMonth' => $totalHMonth,
                'LMonth' => $totalLMonth,
                'TAMonth' => $totalTAMonth,
                'DMonth' => $totalDMonth,
                'MMonth' => $totalMMonth,
                'MXMonth' => $totalMXMonth,
                'SMonth' => $totalSMonth,
                'SXMonth' => $totalSXMonth,
                'IMonth' => $totalIMonth,
                'IPMonth' => $totalIPMonth,
                'IXMonth' => $totalIXMonth,
                'CTMonth' => $totalCTMonth,
                'CHMonth' => $totalCHMonth,
                'CBMonth' => $totalCBMonth,
                'CLMonth' => $totalCLMonth,
                'totalOTMonthHourEnd' => $totalOTMonthHourEnd,
                'totalOTYearHourEnd' => $totalOTYearHourEnd,
                'totalLateMonthHourEnd' => $totalLateMonthHourEnd,
                'totalLateYearHourEnd' => $totalLateYearHourEnd,
                'totalLateMonthHour' => $totalLateMonthHour,
                'totalLateMonthMinute' => $totalLateMonthMinute,
            ];

        }

        $emp1 = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work',
                'test_absen_regs.end_work',
                'test_absen_regs.desc',
                DB::raw("(SUM(time_to_sec(timediff(test_absen_regs.end_work, test_absen_regs.start_work))/3600)) as result"),
                DB::raw("(SUM(time_to_sec(timediff(master_shifts.end_work, master_shifts.start_work))/3600)) as shift"),
            )
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $totalHours = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNot('test_absen_regs.desc', 'TA')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->value('result');

        $totalOT = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNotNull('test_absen_regs.end_work')
            ->whereTime('test_absen_regs.start_work', '<', '09:00:00')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->groupBy('test_absen_regs.date')
            ->get();

        $totalOTs = DB::table('users')
            ->rightJoin('test_absen_regs', 'users.id', '=', 'test_absen_regs.user_id')
            ->select(DB::raw("SUM(time_to_sec(timediff(end_work, start_work)) / 3600) as result"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->whereNotNull('test_absen_regs.end_work')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->value('result');

        $qty = $totalOT->count();
        $tot = 8 * $qty;
        $rr = $totalOTs - $tot;

        return view('admin.pages.testing.testing-detail-month', [
            'emp' => $emp,
            'emp1' => $emp1,
            'totalDaysWithData' => $totalDaysWithData,
            'totalHours' => $totalHours,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totals' => $totals,
            'emp1_total' => $emp1_total,
            'year' => $year
        ]);
    }
    // Kehadiran All Emp

    // Fungsi untuk mengubah TA (TA Attendance)

    // Ini Diubah
    public function changeTADesc()
    {
        $today = Carbon::now()->format('Y-m-d');
        $threeDaysAgo = Carbon::now()->subDays(3)->format('Y-m-d');
        $userDept = Auth::user()->dept;

        if ($userDept == 'HR Legal' || $userDept == 'BSKP') {
            $data = DB::table('test_absen_regs')
                ->join('users', 'test_absen_regs.user_id', '=', 'users.nik')
                ->whereIn('test_absen_regs.desc', ['TA', 'M'])
                ->whereBetween('test_absen_regs.date', [$threeDaysAgo, $today])
                ->groupBy('users.nik')
                ->get();
        } else {
            $data = DB::table('test_absen_regs')
                ->join('users', 'test_absen_regs.user_id', '=', 'users.nik')
                ->whereIn('test_absen_regs.desc', ['TA', 'M'])
                ->whereBetween('test_absen_regs.date', [$threeDaysAgo, $today])
                ->groupBy('users.nik')
                ->where('dept', $userDept)
                ->get();
        }

        return view('admin.pages.testing.index_ta', compact('data'));
    }

    public function changeTADescDetail($nik)
    {
        $today = Carbon::now()->format('Y-m-d');
        $threeDaysAgo = Carbon::now()->subDays(3)->format('Y-m-d');
        $data = DB::table('test_absen_regs')
            ->join('users', 'test_absen_regs.user_id', '=', 'users.nik')
            ->whereIn('test_absen_regs.desc', ['TA', 'M'])
            ->where('test_absen_regs.user_id', $nik)
            ->select('test_absen_regs.id as idAbsen', 'test_absen_regs.date', 'test_absen_regs.start_work', 'test_absen_regs.end_work', 'test_absen_regs.desc')
            ->whereBetween('test_absen_regs.date', [$threeDaysAgo, $today])
            // ->groupBy('users.nik')
            ->get();

        // dd($data);

        return view('admin.pages.testing.change-ta-detail', compact('data'));
    }

    public function updateTADescDetail(Request $request)
    {
        try {
            $dateWork = $request->input('date');
            $startWork = $request->input('start_work');
            $endWork = $request->input('end_work');
            $descNew = $request->input('desc');
            $selectedIds = $request->input('selected_ids');

            $combineDateStartWork = date('Y-m-d H:i:s', strtotime("$dateWork $startWork"));
            $combineDateEndWork = date('Y-m-d H:i:s', strtotime("$dateWork $endWork"));

            // dd($descNew);

            $request->validate([
                'selected_ids' => 'required|array',
                'selected_ids.*' => 'exists:test_absen_regs,id',
            ]);

            foreach ($selectedIds as $id) {
                $dataToUpdate = TestingAbsen::findOrFail($id);

                $dataToUpdate->update([
                    'start_work' => $combineDateStartWork,
                    'end_work' => $combineDateEndWork,
                    'desc' => $descNew,
                ]);
            }

            return redirect()->back()->with('success', 'Data berhasil diperbarui.');
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage());
        }
    }
    // Fungsi untuk mengubah TA (TA Attendance)


    // Function tidak terpakai
    public function testing_dash(TestingAbsenChart $chart, MinutesAbsentChart $minutes, DailyAbsentChart $daily, WeeklyAbsentChart $weekly, MonthlyAbsentChart $monthly)
    {
        return view('admin.pages.testing.dashboard-testing', [
            'chart' => $chart->build(),
            'minutes' => $minutes->build(),
            'daily' => $daily->build(),
            'weekly' => $weekly->build(),
            'monthly' => $monthly->build(),
        ]);
    }

    public function getDateData()
    {
        $dateData = TestingAbsen::select('date')->get();
        return response()->json($dateData);
    }

    public function getData()
    {
        $data = TestingAbsen::with('user')
            ->orderBy('date', 'desc')
            ->get();

        foreach ($data as $item) {
            $item->date = Carbon::parse($item->date)->format('Y-m-d');
            $item->start_work = Carbon::parse($item->start_work)->format('Y-m-d H:i:s');
            $item->end_work = Carbon::parse($item->end_work)->format('Y-m-d H:i:s');
        }

        return response()->json($data);
    }

    public function search_emp(Request $request)
    {
        $searchKeyword = $request->input('search_keyword');

        $data = User::where(function ($query) use ($searchKeyword) {
            $query->where('name', 'like', '%' . $searchKeyword . '%')
                ->orWhere('nik', 'like', '%' . $searchKeyword . '%')
                ->orWhere('status', 'like', '%' . $searchKeyword . '%')
                ->orWhere('jabatan', 'like', '%' . $searchKeyword . '%')
                ->orWhere('dept', 'like', '%' . $searchKeyword . '%');
        })
            ->paginate(10);

        $masterShifts = User::all();

        return view('admin.pages.testing.index', compact('data', 'masterShifts'));
    }

    public function search_emp_month(Request $request)
    {
        $searchKeyword = $request->input('search_keyword');

        $data = User::where(function ($query) use ($searchKeyword) {
            $query->where('name', 'like', '%' . $searchKeyword . '%')
                ->orWhere('nik', 'like', '%' . $searchKeyword . '%')
                ->orWhere('status', 'like', '%' . $searchKeyword . '%')
                ->orWhere('jabatan', 'like', '%' . $searchKeyword . '%')
                ->orWhere('dept', 'like', '%' . $searchKeyword . '%');
        })
            ->paginate(10);

        $masterShifts = User::all();

        return view('admin.pages.testing.index_month', compact('data', 'masterShifts'));
    }
    // Function tidak terpakai


    // Cetak PDF
    public function print_filter(Request $request)
    {
        setlocale(LC_TIME, 'id_ID');

        $nik = $request->nik;
        $bulan = $request->month;
        $tahun = $request->year;

        $date = Carbon::createFromDate($tahun, $bulan, 1);

        $monthName = $date->translatedFormat('F');

        if ($bulan == null && $tahun == null) {
            $dateNow = Carbon::now();
            $firstDay = $dateNow->firstOfMonth()->format('Y-m-d');
            $lastDay = $dateNow->endOfMonth()->format('Y-m-d');
        } else {
            $firstDay = $date->firstOfMonth()->format('Y-m-d');
            $lastDay = $date->endOfMonth()->format('Y-m-d');
        }

        $emp = User::where('nik', $nik)->with([
            'absen_reg_test' => function ($query) use ($firstDay, $lastDay) {
                $query->whereBetween('date', [$firstDay, $lastDay]);
            }
        ])->first();

        $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
        $totalDaysWithData = $totalDays->count();
        $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
            ->where(function ($query) {
                $query->orWhereNull('desc')
                    ->orWhere('desc', '!=', 'MX');
            })
            ->whereBetween('date', [$firstDay, $lastDay])
            ->get();
        $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

        $emp1 = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'test_absen_regs.info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                'test_absen_regs.hadir',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $emp1_total = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir IS NULL then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->addSelect(DB::raw("SUM(test_absen_regs.hadir = '1') as hadir"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->first();

        $totalLateHour = $emp1->sum('tolh');
        $totalLateMinute = $emp1->sum('tolm');
        $totalLateMinutetoHour = $totalLateMinute / 60;
        $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

        $pdf = PDF::loadView('admin.pages.testing.attendance-data-print', [
            'emp' => $emp,
            'emp1' => $emp1,
            'emp1_total' => $emp1_total,
            'totalDaysWithData' => $totalDaysWithData,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totalLateHourEnd' => $totalLateHourEnd,
            'totalDaysWithoutMXData' => $totalDaysWithoutMXData,
        ])->setPaper(array(0, 0, 609.4488, 935.433), 'landscape');
        $filename = "Laporan Kehadiran Detail Harian - {$emp->name} - {$firstDay}-{$lastDay}.pdf";
        $pdf->set_option("isPhpEnabled", true);
        return $pdf->stream($filename);

    }

    public function preview_send(Request $request)
    {
        $selectedEmpCode = $request->input('selected_emp_code');

        $request->validate([
            'selected_emp_code' => 'required|array',
            'selected_emp_code.*' => 'exists:users,nik',
        ]);

        $firstDay = $request->from;
        $lastDay = $request->until;

        if ($firstDay == null && $lastDay == null) {
            $dateNow = Carbon::now();
            $firstDay = $dateNow->firstOfMonth()->format('Y-m-d');
            $lastDay = $dateNow->endOfMonth()->format('Y-m-d');
        } else {
            $firstDay = $request->from;
            $lastDay = $request->until;
        }

        foreach ($selectedEmpCode as $nik) {
            $emp = User::where('nik', $nik)->with([
                'absen_reg_test' => function ($query) use ($firstDay, $lastDay) {
                    $query->whereBetween('date', [$firstDay, $lastDay]);
                }
            ])->first();

            $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
            $totalDaysWithData = $totalDays->count();
            $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
                ->where(function ($query) {
                    $query->orWhereNull('desc')
                        ->orWhere('desc', '!=', 'MX');
                })
                ->whereBetween('date', [$firstDay, $lastDay])
                ->get();
            $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

            $emp1 = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'test_absen_regs.info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    'test_absen_regs.hadir',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $emp1_total = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    'test_absen_regs.hadir',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir IS NULL then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
                ->first();

            $totalLateHour = $emp1->sum('tolh');
            $totalLateMinute = $emp1->sum('tolm');
            $totalLateMinutetoHour = $totalLateMinute / 60;
            $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

            $data = [
                'emp' => $emp,
                'emp1' => $emp1,
                'emp1_total' => $emp1_total,
                'totalDaysWithData' => $totalDaysWithData,
                'firstDay' => $firstDay,
                'lastDay' => $lastDay,
                'totalLateHourEnd' => $totalLateHourEnd,
                'totalDaysWithoutMXData' => $totalDaysWithoutMXData,
            ];

        }

        // F4 = array(0,0,609.4488,935.433)
        $pdf = PDF::loadView('admin.pages.testing.attendance-data-print', $data)->setPaper('a4', 'landscape');
        $pdf->set_option("isPhpEnabled", true);
        return $pdf->stream();
    }

    public function test_mail(Request $request)
    {
        setlocale(LC_TIME, 'id_ID');

        $nik = $request->nik;
        $bulan = $request->month;
        $tahun = $request->year;

        $date = Carbon::createFromDate($tahun, $bulan, 1);

        $monthName = $date->translatedFormat('F');

        if ($bulan == null && $tahun == null) {
            $dateNow = Carbon::now();
            $firstDay = $dateNow->firstOfMonth()->format('Y-m-d');
            $lastDay = $dateNow->endOfMonth()->format('Y-m-d');
        } else {
            $firstDay = $date->firstOfMonth()->format('Y-m-d');
            $lastDay = $date->endOfMonth()->format('Y-m-d');
        }

        $emp = User::where('nik', $nik)->with([
            'absen_reg_test' => function ($query) use ($firstDay, $lastDay) {
                $query->whereBetween('date', [$firstDay, $lastDay]);
            }
        ])->first();

        $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
        $totalDaysWithData = $totalDays->count();
        $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
            ->where(function ($query) {
                $query->orWhereNull('desc')
                    ->orWhere('desc', '!=', 'MX');
            })
            ->whereBetween('date', [$firstDay, $lastDay])
            ->get();
        $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

        $emp1 = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'test_absen_regs.info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->groupBy('test_absen_regs.date')
            ->orderBy('test_absen_regs.date', 'ASC')
            ->get();

        $emp1_total = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
            ->select(
                'users.name',
                'test_absen_regs.date',
                'test_absen_regs.total_hour',
                'test_absen_regs.total_minute',
                'test_absen_regs.overtime_hour',
                'test_absen_regs.overtime_minute',
                'test_absen_regs.late_hour',
                'test_absen_regs.late_minute',
                'test_absen_regs.start_work_info',
                'test_absen_regs.end_work_info',
                'users.nik',
                'users.jabatan',
                'users.name',
                'master_shifts.start_work as shifter',
                'master_shifts.end_work as shifter_end',
                'users.status',
                'users.start_work_user',
                'users.end_work_user',
                'test_absen_regs.start_work as masuk',
                'test_absen_regs.end_work as pulang',
                'test_absen_regs.desc',
                DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
            )
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
            ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir IS NULL then 1 else 0 end) as mx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
            ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
            ->where('test_absen_regs.user_id', $nik)
            ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
            ->first();

        $totalLateHour = $emp1->sum('tolh');
        $totalLateMinute = $emp1->sum('tolm');
        $totalLateMinutetoHour = $totalLateMinute / 60;
        $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

        $data = [
            'emp' => $emp,
            'emp1' => $emp1,
            'emp1_total' => $emp1_total,
            'totalDaysWithData' => $totalDaysWithData,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
            'totalLateHourEnd' => $totalLateHourEnd,
            'totalDaysWithoutMXData' => $totalDaysWithoutMXData,
            'email' => $emp->email,
            'title' => "Data Kehadiaran {$emp->name} Bulan {$monthName}",
            'body' => "Berikut saya kirimkan data kehadiran a.n {$emp->name} pada bulan {$monthName}",
        ];

        $pdf = PDF::loadView('admin.pages.testing.attendance-data-print', $data)->setPaper('a2', 'landscape');

        $fileName = "{$monthName} Summary_Attendance {$emp->nik} {$emp->name}.pdf";

        Mail::send('admin.pages.testing.TestMail', $data, function ($message) use ($data, $pdf, $fileName) {
            $message->to($data["email"], $data["email"])
                ->subject($data["title"])
                ->attachData($pdf->output(), $fileName);
        });

        Alert::success('Berhasil', 'Data Kehadiran Berhasil Dikirim!!!');
        return redirect()->back();
    }

    public function index_mail_batch()
    {
        $getEmployeesDept = User::pluck('dept')->unique();

        $getEmployeesStatus = User::pluck('status')->unique();

        $month = [];

        for ($m = 1; $m <= 12; $m++) {
            $month[] = date('F', mktime(0, 0, 0, $m, 1, date('Y')));
        }

        $yearValue = TestingAbsen::selectRaw('YEAR(date) as year')->distinct()->pluck('year');

        return view('admin.pages.testing.index-send-mail', [
            'getEmployeesDept' => $getEmployeesDept,
            'getEmployeesStatus' => $getEmployeesStatus,
            'month' => $month,
            'yearValue' => $yearValue,
        ]);
    }

    public function filter_mail_batch(Request $request)
    {
        // Get Emp Data
        $dept = $request->dept;
        $status = $request->status;
        $nik = User::where('dept', $dept)->where('status', $status)->get();

        // Get Emp Attendance Data
        $year = $request->year;
        $month = $request->month;
        $date = Carbon::createFromDate($year, $month, 1);
        $monthName = $date->translatedFormat('F');
        $firstDay = $date->firstOfMonth()->format('Y-m-d');
        $lastDay = $date->endOfMonth()->format('Y-m-d');

        return view('admin.pages.testing.send-mail-batch', [
            'nik' => $nik,
            'monthName' => $monthName,
            'firstDay' => $firstDay,
            'lastDay' => $lastDay,
        ]);
    }

    public function send_mail_batch_new(Request $request)
    {
        $getEmployeesDept = User::pluck('dept')->unique();

        $getEmployeesStatus = User::pluck('status')->unique();

        $year = $request->year;
        $month = $request->month;

        $date = Carbon::createFromDate($year, $month, 1);

        $monthName = $date->translatedFormat('F');

        $firstDay = $date->firstOfMonth()->format('Y-m-d');
        $lastDay = $date->endOfMonth()->format('Y-m-d');

        $selectedIds = $request->input('selected_ids');

        $request->validate([
            'selected_ids' => 'required|array',
            'selected_ids.*' => 'exists:users,nik',
        ]);

        foreach ($selectedIds as $nik) {
            $emp = User::where('nik', $nik)->with([
                'absen_reg_test' => function ($query) use ($firstDay, $lastDay) {
                    $query->whereBetween('date', [$firstDay, $lastDay]);
                }
            ])->first();

            $totalDays = TestingAbsen::where('user_id', $nik)->whereBetween('date', [$firstDay, $lastDay])->get();
            $totalDaysWithData = $totalDays->count();
            $totalDaysWithoutMX = TestingAbsen::where('user_id', $nik)
                ->where(function ($query) {
                    $query->orWhereNull('desc')
                        ->orWhere('desc', '!=', 'MX');
                })
                ->whereBetween('date', [$firstDay, $lastDay])
                ->get();
            $totalDaysWithoutMXData = $totalDaysWithoutMX->count();

            $emp1 = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'test_absen_regs.info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
                ->groupBy('test_absen_regs.date')
                ->orderBy('test_absen_regs.date', 'ASC')
                ->get();

            $emp1_total = DB::table('users')
                ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
                ->leftJoin('master_shifts', 'test_absen_regs.shift', '=', 'master_shifts.id')
                ->select(
                    'users.name',
                    'test_absen_regs.date',
                    'test_absen_regs.total_hour',
                    'test_absen_regs.total_minute',
                    'test_absen_regs.overtime_hour',
                    'test_absen_regs.overtime_minute',
                    'test_absen_regs.late_hour',
                    'test_absen_regs.late_minute',
                    'test_absen_regs.start_work_info',
                    'test_absen_regs.end_work_info',
                    'users.nik',
                    'users.jabatan',
                    'users.name',
                    'master_shifts.start_work as shifter',
                    'master_shifts.end_work as shifter_end',
                    'users.status',
                    'users.start_work_user',
                    'users.end_work_user',
                    'test_absen_regs.start_work as masuk',
                    'test_absen_regs.end_work as pulang',
                    'test_absen_regs.desc',
                    DB::raw("SUM(test_absen_regs.total_hour) as tjkx"),
                    DB::raw("SUM(test_absen_regs.total_minute) as tjkm"),
                    DB::raw("SUM(test_absen_regs.overtime_hour) as toth"),
                    DB::raw("SUM(test_absen_regs.overtime_minute) as totm"),
                    DB::raw("SUM(test_absen_regs.late_hour) as tolh"),
                    DB::raw("SUM(test_absen_regs.late_minute) as tolm"),
                    DB::raw("(SUM(time_to_sec(timediff(concat(test_absen_regs.date,' ',master_shifts.end_work), concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600)) as shift"),
                    DB::raw("(SUM(case when test_absen_regs.desc = 'L' then time_to_sec(timediff(test_absen_regs.start_work, concat(test_absen_regs.date,' ',master_shifts.start_work)))/3600 else 0 end)) as late"),
                )
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, test_absen_regs.start_work, test_absen_regs.end_work)/3600) as tjk'))
                ->addSelect(DB::raw('SUM(TIMESTAMPDIFF(SECOND, master_shifts.start_work, master_shifts.end_work)/3600) as shift'))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'H' then 1 else 0 end) as h"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'L' then 1 else 0 end) as l"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'TA' then 1 else 0 end) as ta"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'D' then 1 else 0 end) as d"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'M' then 1 else 0 end) as m"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'MX' and test_absen_regs.hadir IS NULL then 1 else 0 end) as mx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'S' then 1 else 0 end) as s"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'SX' then 1 else 0 end) as sx"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'I' then 1 else 0 end) as i"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IP' then 1 else 0 end) as ip"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'IX' then 1 else 0 end) as ix"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CT' then 1 else 0 end) as ct"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CH' then 1 else 0 end) as ch"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CB' then 1 else 0 end) as cb"))
                ->addSelect(DB::raw("SUM(case when test_absen_regs.desc = 'CL' then 1 else 0 end) as cl"))
                ->where('test_absen_regs.user_id', $nik)
                ->whereBetween('test_absen_regs.date', [$firstDay, $lastDay])
                ->first();

            $totalLateHour = $emp1->sum('tolh');
            $totalLateMinute = $emp1->sum('tolm');
            $totalLateMinutetoHour = $totalLateMinute / 60;
            $totalLateHourEnd = $totalLateHour += $totalLateMinutetoHour;

            $data = [
                'emp' => $emp,
                'emp1' => $emp1,
                'emp1_total' => $emp1_total,
                'totalDaysWithData' => $totalDaysWithData,
                'firstDay' => $firstDay,
                'lastDay' => $lastDay,
                'totalLateHourEnd' => $totalLateHourEnd,
                'totalDaysWithoutMXData' => $totalDaysWithoutMXData,
                'email' => $emp->email,
                'title' => "Data Kehadiaran {$emp->name} Bulan {$monthName}",
                'body' => "Berikut saya kirimkan data kehadiran a.n {$emp->name} pada bulan {$monthName}",
            ];

            $pdf = PDF::loadView('admin.pages.testing.attendance-data-print', $data)->setPaper('a2', 'landscape');

            $fileName = "{$monthName} Summary_Attendance {$emp->nik} {$emp->name}.pdf";

            Mail::send('admin.pages.testing.TestMail', $data, function ($message) use ($data, $pdf, $fileName) {
                $message->to($data["email"], $data["email"])
                    ->subject($data["title"])
                    ->attachData($pdf->output(), $fileName);
            });
        }

        Alert::success('Berhasil', 'Data Kehadiran Berhasil Dikirim!!!');
        return view('admin.pages.testing.index-send-mail', [
            'getEmployeesDept' => $getEmployeesDept,
            'getEmployeesStatus' => $getEmployeesStatus,
        ]);
    }
    // Cetak PDF


    public function update(Request $request)
    {
        // $attLogMode1 = TestingKitaServer::select('id', 'nik', 'scan_date', 'sn')->get();

        $sn = 'FIO66206022260004';
        $firstDate = '2024-01-23';
        $lastDate = '2024-01-24';
        $attLogMode1 = TestingKitaServer::where('inoutmode', 1)
            ->whereDate('scan_date', '>=', $firstDate)
            ->whereDate('scan_date', '<=', $lastDate)
            ->where('sn', $sn)
            ->select('id', 'nik', 'scan_date', 'sn')
            ->get();

        foreach ($attLogMode1 as $log) {

            if (!Str::contains($log->nik, '-')) {
                $length = strlen($log->nik);
                $log->nik = substr_replace($log->nik, '-', $length - 3, 0);
            }

            $existingEntry = TestingAbsen::where('user_id', $log->nik)
                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                ->first();

            $shiftArchiveEntry = ShiftArchive::where('nik', $log->nik)
                ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                ->first();

            if ($shiftArchiveEntry) {
                $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('hadir');

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('end_work');

                $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                if (!$existingEntry) {
                    $absentDate = Carbon::parse($log->scan_date)->subDay()->format('Y-m-d');
                    $dataEntry = TestingAbsen::where('user_id', $log->nik)->whereDate('date', '=', $absentDate)->where('shift', '3')->first();
                    $absenIn = TestingAbsen::where('user_id', $log->nik)->whereDate('date', '=', $absentDate)->value('start_work');
                    $absenInTime = Carbon::parse($absenIn)->format('H:i:s');
                    $shift3Time = MasterShift::where('id', 3)->select('start_work as jampiro')->first();
                    $shift3TimeA = $shift3Time->jampiro;

                    if ($dataEntry) {
                        if ($absenInTime > $shift3TimeA) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', $absentDate)
                                ->whereNotNull('start_work')
                                ->whereNull('end_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'end_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                    'desc' => 'L',
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', $absentDate)
                                ->whereNotNull('start_work')
                                ->whereNull('end_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'end_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                    'desc' => 'H',
                                ]);
                        }
                    } else {
                        TestingAbsen::create([
                            'user_id' => $log->nik,
                            'date' => $log->scan_date,
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                            'desc' => 'TA',
                            'hadir' => '1',
                            'shift' => $shiftArchiveEntry->shift
                        ]);
                    }
                } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'MX')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);

                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'IP')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'MX')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'IP')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'end_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                            'end_work_info' => $log->sn,
                        ]);
                }

                // Jam shift (Actual)
                $startWorkUser1 = User::join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                    ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                    ->where('users.nik', $log->nik)
                    ->select('users.*', 'shift_archives.*', 'master_shifts.*')
                    ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                    ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                    ->first();

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                $shiftValue = $shiftArchiveEntry->shift;

                if ($shiftValue == 1) {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();
                } elseif ($shiftValue == 2) {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();
                } elseif ($shiftValue == 3) {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();

                } elseif ($shiftValue == 4) {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();
                } elseif ($shiftValue == 5) {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 5 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 5 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();
                } else {
                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 3 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 3 ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();
                }

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                // Jam
                $startWorkUser = $startWorkUser1->start_work;

                // Tanggal Mulai
                $startDate = $startWorkUser1->start_date;
                // Tanggal Berkahir
                $endDate = $startWorkUser1->end_date;

                // Jam Absen (Origin)
                $scanDateUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                // Jam
                $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');
                // Tanggal
                $scanDateUserDate = Carbon::parse($scanDateUser)->format('Y-m-d');

                if ($startDate <= $scanDateUserDate && $endDate >= $scanDateUserDate) {
                    $lateCheck = $scanDateUserTime > $startWorkUser;
                    if (!$lateCheck) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->update([
                                'desc' => 'H',
                                'hadir' => '1',
                                'total_hour' => $totalHourShift->total_hours,
                                'overtime_hour' => $totalHourShift->overtime_hour,
                                'late_hour' => $totalHourShift->late_hours,
                                'total_minute' => $totalHourShift->total_minutes,
                                'overtime_minute' => $totalHourShift->overtime_minutes,
                                'late_minute' => $totalHourShift->late_minutes,
                            ]);
                    } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'D') {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'D')
                            ->update([
                                'desc' => 'D',
                                'hadir' => '1',
                                'total_hour' => $totalHourShift->total_hours,
                                'overtime_hour' => $totalHourShift->overtime_hour,
                                'late_hour' => $totalHourShift->late_hours,
                                'total_minute' => $totalHourShift->total_minutes,
                                'overtime_minute' => $totalHourShift->overtime_minutes,
                                'late_minute' => $totalHourShift->late_minutes,
                            ]);
                    } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'IP' || $scanDateUserTime >= $startWorkUser && $descUser == 'IP') {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'IP')
                            ->update([
                                'desc' => 'IP',
                                'hadir' => '1',
                                'total_hour' => $totalHourNonShift->total_hours - 1,
                                'total_minute' => $totalHourNonShift->total_minutes,
                                'overtime_hour' => null,
                                'late_hour' => null,
                                'overtime_minute' => null,
                                'late_minute' => null,
                            ]);
                    } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'MX' && $scanDateUserTime >= $startWorkUser) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'MX')
                            ->update([
                                'desc' => 'MX',
                                'hadir' => '1',
                                'overtime_hour' => $totalHourNonShift->total_hours,
                                'overtime_minute' => $totalHourNonShift->total_minutes,
                                'total_hour' => null,
                                'late_hour' => null,
                                'total_minute' => null,
                                'late_minute' => null,
                            ]);
                    } else {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->update([
                                'desc' => 'L',
                                'hadir' => '1',
                                'total_hour' => $totalHourShift->total_hours,
                                'overtime_hour' => $totalHourShift->overtime_hour,
                                'late_hour' => $totalHourShift->late_hours,
                                'total_minute' => $totalHourShift->total_minutes,
                                'overtime_minute' => $totalHourShift->overtime_minutes,
                                'late_minute' => $totalHourShift->late_minutes,
                            ]);
                    }
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => null,
                        ]);
                }
            } else {
                $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('hadir');

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('end_work');

                $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                if (!$existingEntry) {
                    TestingAbsen::create([
                        'user_id' => $log->nik,
                        'date' => $log->scan_date,
                        'start_work' => $log->scan_date,
                        'start_work_info' => $log->sn,
                        'desc' => 'TA',
                        'hadir' => '1',
                        'shift' => '0'
                    ]);
                } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'MX')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);

                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'IP')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'MX')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'IP')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'end_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                            'end_work_info' => $log->sn,
                        ]);
                }

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                if ($log->sn == "FIO66208023190896") {
                    $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                            DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                            DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                            DB::raw('SUM(CASE WHEN MINUTE(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                        ])
                        ->first();
                } else {
                    $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                            DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                            DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                            DB::raw('SUM(CASE WHEN MINUTE(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                        ])
                        ->first();
                }

                // Jam shift (Actual)
                $user = User::where('nik', $log->nik)->first();
                $startWorkUserInjury = $user->start_work_user;
                $startWorkUserTimeInjury = Carbon::parse($startWorkUserInjury)->format('H:i:s');

                // Jam Absen (Origin)
                $scanDateUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('hadir');

                // Jam
                $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');

                $lateCheck = $scanDateUserTime > $startWorkUserTimeInjury;

                if (!$lateCheck) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => 'H',
                            'hadir' => '1',
                            'total_hour' => $totalHourNonShift->total_hours - 1,
                            'overtime_hour' => $totalHourNonShift->overtime_hour,
                            'late_hour' => $totalHourNonShift->late_hours,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_minute' => $totalHourNonShift->late_minutes,
                        ]);
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'D' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'D' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'D')
                        ->update([
                            'desc' => 'D',
                            'hadir' => '1',
                            'total_hour' => $totalHourNonShift->total_hours - 1,
                            'overtime_hour' => $totalHourNonShift->overtime_hour,
                            'late_hour' => $totalHourNonShift->late_hours,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_minute' => $totalHourNonShift->late_minutes,
                        ]);
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'IP' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'IP' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'IP')
                        ->update([
                            'desc' => 'IP',
                            'hadir' => '1',
                            'total_hour' => $totalHourNonShift->total_hours - 1,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_hour' => null,
                            'late_hour' => null,
                            'overtime_minute' => null,
                            'late_minute' => null,
                        ]);
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'MX')
                        ->update([
                            'desc' => 'MX',
                            'hadir' => '1',
                            'overtime_hour' => $totalHourNonShift->total_hours,
                            'overtime_minute' => $totalHourNonShift->total_minutes,
                            'total_hour' => null,
                            'late_hour' => null,
                            'total_minute' => null,
                            'late_minute' => null,
                        ]);
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => 'L',
                            'hadir' => '1',
                            'total_hour' => $totalHourNonShift->total_hours - 1,
                            'overtime_hour' => $totalHourNonShift->overtime_hour,
                            'late_hour' => $totalHourNonShift->late_hours,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_minute' => $totalHourNonShift->late_minutes,
                        ]);
                }
            }

            // Update data dengan desc D
            if ($existingEntry) {
                TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->whereNotNull('start_work')
                    ->where('start_work', '!=', $log->scan_date)
                    ->where('desc', 'D')
                    ->update([
                        'end_work' => $log->scan_date,
                        'end_work_info' => $log->sn,
                    ]);
            }
        }

        return response()->json(['message' => 'Data berhasil diperbarui.'], 200);
    }

    // public function update_shift_3(Request $request)
    // {
    //     $empCode = '194-012';
    //     // $date = '2023-12-31 22:56:51';
    //     // $date = '2023-12-28 07:03:33';
    //     $firstDate = '2023-12-25';
    //     $lastDate = '2023-12-31';
    //     $attLogMode1 = TestingKitaServer::where('inoutmode', 1)
    //         ->whereDate('scan_date', '>=', $firstDate)
    //         ->whereDate('scan_date', '<=', $lastDate)
    //         // ->where('scan_date', '=', $date)
    //         ->where('nik', $empCode)
    //         ->select('id', 'nik', 'scan_date', 'sn')
    //         ->get();

    //     // dd($attLogMode1);

    //     foreach ($attLogMode1 as $log) {
    //         if (!Str::contains($log->nik, '-')) {
    //             $length = strlen($log->nik);
    //             $log->nik = substr_replace($log->nik, '-', $length - 3, 0);
    //         }

    //         $shiftArchiveEntry = ShiftArchive::where('nik', $log->nik)
    //             ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
    //             ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
    //             ->first();



    //         if ($shiftArchiveEntry->shift == 3) {

    //             $absentDate = Carbon::parse($log->scan_date)->subDay()->format('Y-m-d');
    //             $existingEntryA = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($absentDate)))
    //                 ->first();

    //             $existingEntryB = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->first();

    //             if ($existingEntryA && !$existingEntryB) {
    //                 $cekShift = ShiftArchive::where('nik', $log->nik)
    //                     ->whereDate('start_date', '<=', $absentDate)
    //                     ->whereDate('end_date', '>=', $absentDate)
    //                     ->first();
    //                 if ($cekShift->shift == 3) {
    //                     $endWorkCheck = $existingEntryA->end_work;
    //                     if ($endWorkCheck == null) {
    //                         TestingAbsen::where('user_id', $log->nik)
    //                             ->whereDate('date', '=', $absentDate)
    //                             ->whereNotNull('start_work')
    //                             ->where('start_work', '!=', $log->scan_date)
    //                             ->update([
    //                                 'end_work' => $log->scan_date,
    //                                 'start_work_info' => $log->sn,
    //                                 'end_work_info' => $log->sn,
    //                             ]);
    //                     } else {
    //                         TestingAbsen::create([
    //                             'user_id' => $log->nik,
    //                             'date' => $log->scan_date,
    //                             'start_work' => $log->scan_date,
    //                             'start_work_info' => $log->sn,
    //                             'desc' => 'TA',
    //                             'hadir' => '1',
    //                             'shift' => $shiftArchiveEntry->shift
    //                         ]);
    //                     }
    //                 } else {
    //                     TestingAbsen::create([
    //                         'user_id' => $log->nik,
    //                         'date' => $log->scan_date,
    //                         'start_work' => $log->scan_date,
    //                         'start_work_info' => $log->sn,
    //                         'desc' => 'TA',
    //                         'hadir' => '1',
    //                         'shift' => $shiftArchiveEntry->shift
    //                     ]);
    //                 }
    //             } elseif (!$existingEntryA && !$existingEntryB) {
    //                 TestingAbsen::create([
    //                     'user_id' => $log->nik,
    //                     'date' => $log->scan_date,
    //                     'start_work' => $log->scan_date,
    //                     'start_work_info' => $log->sn,
    //                     'desc' => 'TA',
    //                     'hadir' => '1',
    //                     'shift' => $shiftArchiveEntry->shift
    //                 ]);
    //             }
    //         } else {
    //             $existingEntry = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->first();

    //             $hadirInjury = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('hadir');

    //             $descUser = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('desc');

    //             $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('end_work');

    //             $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('start_work');

    //             if (!$existingEntry) {
    //                 TestingAbsen::create([
    //                     'user_id' => $log->nik,
    //                     'date' => $log->scan_date,
    //                     'start_work' => $log->scan_date,
    //                     'start_work_info' => $log->sn,
    //                     'desc' => 'TA',
    //                     'hadir' => '1',
    //                     'shift' => $shiftArchiveEntry->shift
    //                 ]);
    //             } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->where('desc', 'MX')
    //                     ->whereNull('start_work')
    //                     ->update([
    //                         'start_work' => $log->scan_date,
    //                         'start_work_info' => $log->sn,
    //                     ]);

    //             } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->where('desc', 'IP')
    //                     ->whereNull('start_work')
    //                     ->update([
    //                         'start_work' => $log->scan_date,
    //                         'start_work_info' => $log->sn,
    //                     ]);
    //             } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->whereNotNull('start_work')
    //                     ->where('start_work', '!=', $log->scan_date)
    //                     ->where('desc', 'MX')
    //                     ->update([
    //                         'end_work' => $log->scan_date,
    //                         'end_work_info' => $log->sn,
    //                     ]);
    //             } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->whereNotNull('start_work')
    //                     ->where('start_work', '!=', $log->scan_date)
    //                     ->where('desc', 'IP')
    //                     ->update([
    //                         'end_work' => $log->scan_date,
    //                         'end_work_info' => $log->sn,
    //                     ]);
    //             } else {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->whereNotNull('start_work')
    //                     ->where('start_work', '!=', $log->scan_date)
    //                     ->update([
    //                         'end_work' => $log->scan_date,
    //                         'start_work_info' => $log->sn,
    //                         'end_work_info' => $log->sn,
    //                     ]);
    //             }

    //             // Jam shift (Actual)
    //             $startWorkUser1 = User::join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
    //                 ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
    //                 ->where('users.nik', $log->nik)
    //                 ->select('users.*', 'shift_archives.*', 'master_shifts.*')
    //                 ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->first();

    //             $descUser = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('desc');

    //             $shiftValue = $shiftArchiveEntry->shift;

    //             if ($shiftValue == 1) {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();
    //             } elseif ($shiftValue == 2) {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();
    //             } elseif ($shiftValue == 3) {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();

    //             } elseif ($shiftValue == 4) {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();
    //             } elseif ($shiftValue == 5) {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 5 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 5 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();
    //             } else {
    //                 $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

    //                 $totalHourShift = TestingAbsen::where('user_id', $log->nik)
    //                     ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
    //                     ->join('master_shifts', function ($join) use ($findLate) {
    //                         $join->on('master_shifts.id', '=', 'shift_archives.shift')
    //                             ->where('master_shifts.start_work', '=', $findLate->start_work);
    //                     })
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->select([
    //                         'test_absen_regs.date as date',
    //                         DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
    //                         DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
    //                         DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 3 ELSE 0 END as overtime_hour'),
    //                         DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 3 ELSE 0 END as overtime_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
    //                         DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
    //                     ])
    //                     ->first();
    //             }

    //             $descUser = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('desc');

    //             // Jam
    //             $startWorkUser = $startWorkUser1->start_work;

    //             // Tanggal Mulai
    //             $startDate = $startWorkUser1->start_date;
    //             // Tanggal Berkahir
    //             $endDate = $startWorkUser1->end_date;

    //             // Jam Absen (Origin)
    //             $scanDateUser = TestingAbsen::where('user_id', $log->nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                 ->value('start_work');

    //             // Jam
    //             $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');
    //             // Tanggal
    //             $scanDateUserDate = Carbon::parse($scanDateUser)->format('Y-m-d');

    //             if ($startDate <= $scanDateUserDate && $endDate >= $scanDateUserDate) {
    //                 $lateCheck = $scanDateUserTime > $startWorkUser;
    //                 if (!$lateCheck) {
    //                     TestingAbsen::where('user_id', $log->nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                         ->whereNotNull('start_work')
    //                         // ->where('start_work', '!=', $log->scan_date)
    //                         ->update([
    //                             'desc' => 'H',
    //                             'hadir' => '1',
    //                             'total_hour' => $totalHourShift->total_hours,
    //                             'overtime_hour' => $totalHourShift->overtime_hour,
    //                             'late_hour' => $totalHourShift->late_hours,
    //                             'total_minute' => $totalHourShift->total_minutes,
    //                             'overtime_minute' => $totalHourShift->overtime_minutes,
    //                             'late_minute' => $totalHourShift->late_minutes,
    //                         ]);
    //                 } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'D') {
    //                     TestingAbsen::where('user_id', $log->nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                         ->whereNotNull('start_work')
    //                         ->where('start_work', '!=', $log->scan_date)
    //                         ->where('desc', 'D')
    //                         ->update([
    //                             'desc' => 'D',
    //                             'hadir' => '1',
    //                             'total_hour' => $totalHourShift->total_hours,
    //                             'overtime_hour' => $totalHourShift->overtime_hour,
    //                             'late_hour' => $totalHourShift->late_hours,
    //                             'total_minute' => $totalHourShift->total_minutes,
    //                             'overtime_minute' => $totalHourShift->overtime_minutes,
    //                             'late_minute' => $totalHourShift->late_minutes,
    //                         ]);
    //                 } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'IP' || $scanDateUserTime >= $startWorkUser && $descUser == 'IP') {
    //                     TestingAbsen::where('user_id', $log->nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                         ->whereNotNull('start_work')
    //                         ->where('start_work', '!=', $log->scan_date)
    //                         ->where('desc', 'IP')
    //                         ->update([
    //                             'desc' => 'IP',
    //                             'hadir' => '1',
    //                             'total_hour' => $totalHourShift->total_hours,
    //                             'overtime_hour' => $totalHourShift->overtime_hour,
    //                             'late_hour' => null,
    //                             'total_minute' => $totalHourShift->total_minutes,
    //                             'overtime_minute' => $totalHourShift->overtime_minutes,
    //                             'late_minute' => null,
    //                         ]);
    //                 } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'MX' && $scanDateUserTime >= $startWorkUser) {
    //                     TestingAbsen::where('user_id', $log->nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                         ->whereNotNull('start_work')
    //                         ->where('start_work', '!=', $log->scan_date)
    //                         ->where('desc', 'MX')
    //                         ->update([
    //                             'desc' => 'MX',
    //                             'hadir' => '1',
    //                             'total_hour' => $totalHourShift->total_hours,
    //                             'overtime_hour' => $totalHourShift->overtime_hour,
    //                             'late_hour' => $totalHourShift->late_hours,
    //                             'total_minute' => $totalHourShift->total_minutes,
    //                             'overtime_minute' => $totalHourShift->overtime_minutes,
    //                             'late_minute' => $totalHourShift->late_minutes,
    //                         ]);
    //                 } else {
    //                     TestingAbsen::where('user_id', $log->nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                         ->whereNotNull('start_work')
    //                         ->where('start_work', '!=', $log->scan_date)
    //                         ->update([
    //                             'desc' => 'L',
    //                             'hadir' => '1',
    //                             'total_hour' => $totalHourShift->total_hours,
    //                             'overtime_hour' => $totalHourShift->overtime_hour,
    //                             'late_hour' => $totalHourShift->late_hours,
    //                             'total_minute' => $totalHourShift->total_minutes,
    //                             'overtime_minute' => $totalHourShift->overtime_minutes,
    //                             'late_minute' => $totalHourShift->late_minutes,
    //                         ]);
    //                 }
    //             } else {
    //                 TestingAbsen::where('user_id', $log->nik)
    //                     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
    //                     ->whereNotNull('start_work')
    //                     ->where('start_work', '!=', $log->scan_date)
    //                     ->update([
    //                         'desc' => null,
    //                     ]);
    //             }
    //         }
    //     }
    //     return response()->json(['message' => 'Data berhasil diperbarui.'], 200);
    // }

    public function update_shift_3(Request $request)
    {
        $nik = 'FLFAC-036';
        $firstDate = '2024-03-06';
        $lastDate = '2024-03-06';

        $attLogMode1 = TestingKitaServer::where('inoutmode', 1)
            ->whereDate('scan_date', '>=', $firstDate)
            ->whereDate('scan_date', '<=', $lastDate)
            ->where('nik', $nik)
            ->select('id', 'nik', 'scan_date', 'sn')
            ->get();

        foreach ($attLogMode1 as $log) {
            if (!Str::contains($log->nik, '-')) {
                $length = strlen($log->nik);
                $log->nik = substr_replace($log->nik, '-', $length - 3, 0);
            }

            $shiftArchiveEntry = ShiftArchive::where('nik', $log->nik)
                ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                ->first();

            if ($shiftArchiveEntry) {
                // echo 'Ada Shift';

                if ($shiftArchiveEntry->shift == 3) {

                    // $absentDate = Carbon::parse($log->scan_date)->subDay()->format('Y-m-d');

                    // $existingEntryA = TestingAbsen::where('user_id', $log->nik)
                    //     ->whereDate('date', '=', date('Y-m-d', strtotime($absentDate)))
                    //     ->first();

                    // $existingEntryB = TestingAbsen::where('user_id', $log->nik)
                    //     ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //     ->first();

                    $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('hadir');

                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('end_work');

                    $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('start_work');

                    // $absentDate = Carbon::parse($log->scan_date)->addDay()->format('Y-m-d');
                    // $getDataAdd = TestingKitaServer::where('nik', $log->nik)
                    //     ->whereDate('scan_date', '=', $absentDate)
                    //     ->select('scan_date', 'sn')
                    //     ->first();

                    // dd($absentDate, $getDataAdd->scan_date);

                    // $cekShift = ShiftArchive::where('nik', $log->nik)
                    //     ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                    //     ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                    //     ->first();

                    // $absentDate = Carbon::parse($log->scan_date)->addDay()->format('Y-m-d H:i:s');
                    // dd($log->scan_date, $absentDate);

                    $cekShift = ShiftArchive::where('nik', $log->nik)
                        ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                        ->first();

                    if ($cekShift->shift == 3) {

                        if ($startWorkInjury == null && $endWorkInjury == null) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNull('start_work')
                                ->whereNull('end_work')
                                ->whereNull('desc')
                                ->whereNull('hadir')
                                ->update([
                                    'start_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'desc' => 'TA',
                                    'hadir' => 1
                                ]);

                        } elseif ($startWorkInjury != null && $endWorkInjury == null) {
                            $absentDate = Carbon::parse($log->scan_date)->addDay()->format('Y-m-d');
                            $getDataAdd = TestingKitaServer::where('nik', $log->nik)
                                ->whereDate('scan_date', '=', $absentDate)
                                ->select('scan_date', 'sn')
                                ->first();
                            $scan = $getDataAdd->scan_date;

                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', $log->scan_date)
                                ->whereNotNull('start_work')
                                ->whereNull('end_work')
                                ->whereNotNull('desc')
                                ->whereNotNull('hadir')
                                ->update([
                                    'end_work' => $scan,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                    'desc' => 'H',
                                ]);
                        } else {

                        }

                    } elseif ($cekShift->shift == 2) {

                    } else {

                    }

                    if ($startWorkInjury == null) {
                        if ($endWorkInjury != null) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNull('start_work')
                                ->whereNull('end_work')
                                ->whereNull('desc')
                                ->whereNull('hadir')
                                ->update([
                                    'start_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'desc' => 'TA',
                                    'hadir' => 1
                                ]);
                        }
                    } else {
                        $cekShift = ShiftArchive::where('nik', $log->nik)
                            ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                            ->first();

                        // dd($cekShift->shift == 3);

                        if ($cekShift->shift == 3) {
                            $absentDate = Carbon::parse($log->scan_date)->addDay()->format('Y-m-d H:i:s');
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', $log->scan_date)
                                ->whereNotNull('start_work')
                                ->whereNull('end_work')
                                ->whereNotNull('desc')
                                ->whereNotNull('hadir')
                                ->update([
                                    'end_work' => $absentDate,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                    'desc' => 'H',
                                ]);
                        } elseif ($cekShift->shift == 2) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'end_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', $absentDate)
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'end_work' => $log->scan_date,
                                    'start_work_info' => $log->sn,
                                    'end_work_info' => $log->sn,
                                ]);
                        }

                    }

                    // $cekShift = ShiftArchive::where('nik', $log->nik)
                    //     ->whereDate('start_date', '<=', $absentDate)
                    //     ->whereDate('end_date', '>=', $absentDate)
                    //     ->first();
                    // if ($cekShift->shift == 3) {
                    //     $endWorkCheck = $existingEntryA->end_work;
                    //     if ($endWorkCheck == null) {
                    //         // Code untuk desc dan perhitungan
                    //         TestingAbsen::where('user_id', $log->nik)
                    //             ->whereDate('date', '=', $absentDate)
                    //             ->whereNotNull('start_work')
                    //             ->where('start_work', '!=', $log->scan_date)
                    //             ->update([
                    //                 'end_work' => $log->scan_date,
                    //                 'start_work_info' => $log->sn,
                    //                 'end_work_info' => $log->sn,
                    //             ]);
                    //     } else {
                    //         TestingAbsen::create([
                    //             'user_id' => $log->nik,
                    //             'date' => $log->scan_date,
                    //             'start_work' => $log->scan_date,
                    //             'start_work_info' => $log->sn,
                    //             'desc' => 'TA',
                    //             'hadir' => '1',
                    //             'shift' => $shiftArchiveEntry->shift
                    //         ]);
                    //     }
                    // } else {
                    //     TestingAbsen::create([
                    //         'user_id' => $log->nik,
                    //         'date' => $log->scan_date,
                    //         'start_work' => $log->scan_date,
                    //         'start_work_info' => $log->sn,
                    //         'desc' => 'TA',
                    //         'hadir' => '1',
                    //         'shift' => $shiftArchiveEntry->shift
                    //     ]);
                    // }

                    // Jam shift (Actual)
                    $startWorkUser1 = User::join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                        ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                        ->where('users.nik', $log->nik)
                        ->select('users.*', 'shift_archives.*', 'master_shifts.*')
                        ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                        ->first();

                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    $shiftValue = $shiftArchiveEntry->shift;

                    $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                    $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                        ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                        ->join('master_shifts', function ($join) use ($findLate) {
                            $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                ->where('master_shifts.start_work', '=', $findLate->start_work);
                        })
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                            DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                            DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                            DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                        ])
                        ->first();

                    // Disini
                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    // Jam
                    $startWorkUser = $startWorkUser1->start_work;

                    // Tanggal Mulai
                    $startDate = $startWorkUser1->start_date;
                    // Tanggal Berkahir
                    $endDate = $startWorkUser1->end_date;

                    // Jam Absen (Origin)
                    $scanDateUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('start_work');

                    // Jam
                    $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');
                    // Tanggal
                    $scanDateUserDate = Carbon::parse($scanDateUser)->format('Y-m-d');

                    if ($startDate <= $scanDateUserDate && $endDate >= $scanDateUserDate) {
                        $lateCheck = $scanDateUserTime > $startWorkUser;
                        if (!$lateCheck && $descUser == null && $hadirInjury == null) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                // ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'desc' => 'H',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'D') {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'D')
                                ->update([
                                    'desc' => 'D',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'IP' || $scanDateUserTime >= $startWorkUser && $descUser == 'IP') {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'IP')
                                ->update([
                                    'desc' => 'IP',
                                    'hadir' => '1',
                                    'total_hour' => $totalHourShift->total_hours,
                                    'overtime_hour' => $totalHourShift->overtime_hour,
                                    'late_hour' => null,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'MX' && $scanDateUserTime >= $startWorkUser) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'MX')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '1',
                                    'overtime_hour' => $totalHourShift->total_hours,
                                    'overtime_minute' => $totalHourShift->total_minutes,
                                    'total_hour' => null,
                                    'late_hour' => null,
                                    'total_minute' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'desc' => 'L',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        }
                    }
                } else {
                    // Shift bukan 2
                    $existingEntry = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->first();

                    $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('hadir');

                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('end_work');

                    $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('start_work');

                    if ($existingEntry && $hadirInjury == null && $descUser == null && $endWorkInjury == null && $startWorkInjury == null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNull('desc')
                            ->whereNull('start_work')
                            ->update([
                                'start_work' => $log->scan_date,
                                'start_work_info' => $log->sn,
                                'desc' => 'TA',
                                'hadir' => '1',
                                'shift' => '0'
                            ]);
                    } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'TA' && $endWorkInjury == null && $startWorkInjury != null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'TA')
                            ->update([
                                'end_work' => $log->scan_date,
                                'end_work_info' => $log->sn,
                            ]);
                    } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->where('desc', 'MX')
                            ->whereNull('start_work')
                            ->update([
                                'start_work' => $log->scan_date,
                                'start_work_info' => $log->sn,
                            ]);
                    } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->where('desc', 'IP')
                            ->whereNull('start_work')
                            ->update([
                                'start_work' => $log->scan_date,
                                'start_work_info' => $log->sn,
                            ]);
                    } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'MX')
                            ->update([
                                'end_work' => $log->scan_date,
                                'end_work_info' => $log->sn,
                            ]);
                    } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->where('desc', 'IP')
                            ->update([
                                'end_work' => $log->scan_date,
                                'end_work_info' => $log->sn,
                            ]);
                    } else {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->update([
                                'end_work' => $log->scan_date,
                                'start_work_info' => $log->sn,
                                'end_work_info' => $log->sn,
                            ]);
                    }

                    // if (!$existingEntry) {
                    //     TestingAbsen::create([
                    //         'user_id' => $log->nik,
                    //         'date' => $log->scan_date,
                    //         'start_work' => $log->scan_date,
                    //         'start_work_info' => $log->sn,
                    //         'desc' => 'TA',
                    //         'hadir' => '1',
                    //         'shift' => $shiftArchiveEntry->shift
                    //     ]);
                    // } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                    //     TestingAbsen::where('user_id', $log->nik)
                    //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //         ->where('desc', 'MX')
                    //         ->whereNull('start_work')
                    //         ->update([
                    //             'start_work' => $log->scan_date,
                    //             'start_work_info' => $log->sn,
                    //         ]);

                    // } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                    //     TestingAbsen::where('user_id', $log->nik)
                    //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //         ->where('desc', 'IP')
                    //         ->whereNull('start_work')
                    //         ->update([
                    //             'start_work' => $log->scan_date,
                    //             'start_work_info' => $log->sn,
                    //         ]);
                    // } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                    //     TestingAbsen::where('user_id', $log->nik)
                    //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //         ->whereNotNull('start_work')
                    //         ->where('start_work', '!=', $log->scan_date)
                    //         ->where('desc', 'MX')
                    //         ->update([
                    //             'end_work' => $log->scan_date,
                    //             'end_work_info' => $log->sn,
                    //         ]);
                    // } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                    //     TestingAbsen::where('user_id', $log->nik)
                    //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //         ->whereNotNull('start_work')
                    //         ->where('start_work', '!=', $log->scan_date)
                    //         ->where('desc', 'IP')
                    //         ->update([
                    //             'end_work' => $log->scan_date,
                    //             'end_work_info' => $log->sn,
                    //         ]);
                    // } else {
                    //     TestingAbsen::where('user_id', $log->nik)
                    //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    //         ->whereNotNull('start_work')
                    //         ->where('start_work', '!=', $log->scan_date)
                    //         ->update([
                    //             'end_work' => $log->scan_date,
                    //             'start_work_info' => $log->sn,
                    //             'end_work_info' => $log->sn,
                    //         ]);
                    // }

                    // Jam shift (Actual)
                    $startWorkUser1 = User::join('shift_archives', 'users.nik', '=', 'shift_archives.nik')
                        ->join('master_shifts', 'shift_archives.shift', '=', 'master_shifts.id')
                        ->where('users.nik', $log->nik)
                        ->select('users.*', 'shift_archives.*', 'master_shifts.*')
                        ->whereDate('start_date', '<=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereDate('end_date', '>=', date('Y-m-d', strtotime($log->scan_date)))
                        ->first();

                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    $shiftValue = $shiftArchiveEntry->shift;

                    if ($shiftValue == 1) {
                        $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                        $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                            ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                            ->join('master_shifts', function ($join) use ($findLate) {
                                $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                    ->where('master_shifts.start_work', '=', $findLate->start_work);
                            })
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                            ])
                            ->first();
                    } elseif ($shiftValue == 2) {
                        $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                        $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                            ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                            ->join('master_shifts', function ($join) use ($findLate) {
                                $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                    ->where('master_shifts.start_work', '=', $findLate->start_work);
                            })
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                            ])
                            ->first();
                    } elseif ($shiftValue == 4) {
                        $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                        $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                            ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                            ->join('master_shifts', function ($join) use ($findLate) {
                                $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                    ->where('master_shifts.start_work', '=', $findLate->start_work);
                            })
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                            ])
                            ->first();
                    } elseif ($shiftValue == 5) {
                        $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                        $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                            ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                            ->join('master_shifts', function ($join) use ($findLate) {
                                $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                    ->where('master_shifts.start_work', '=', $findLate->start_work);
                            })
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 5 ELSE 0 END as overtime_hour'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 5 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                            ])
                            ->first();
                    } else {
                        $findLate = MasterShift::where('id', $shiftValue)->select('id', 'start_work')->first();

                        $totalHourShift = TestingAbsen::where('user_id', $log->nik)
                            ->join('shift_archives', 'shift_archives.nik', '=', 'test_absen_regs.user_id')
                            ->join('master_shifts', function ($join) use ($findLate) {
                                $join->on('master_shifts.id', '=', 'shift_archives.shift')
                                    ->where('master_shifts.start_work', '=', $findLate->start_work);
                            })
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 3 ELSE 0 END as overtime_hour'),
                                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 3 THEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) ELSE 0 END as overtime_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),
                            ])
                            ->first();
                    }

                    $descUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('desc');

                    // Jam
                    $startWorkUser = $startWorkUser1->start_work;

                    // Tanggal Mulai
                    $startDate = $startWorkUser1->start_date;
                    // Tanggal Berkahir
                    $endDate = $startWorkUser1->end_date;

                    // Jam Absen (Origin)
                    $scanDateUser = TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->value('start_work');

                    // Jam
                    $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');
                    // Tanggal
                    $scanDateUserDate = Carbon::parse($scanDateUser)->format('Y-m-d');

                    if ($startDate <= $scanDateUserDate && $endDate >= $scanDateUserDate) {
                        $lateCheck = $scanDateUserTime > $startWorkUser;
                        if (!$lateCheck) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                // ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'desc' => 'H',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'D' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUser && $descUser == 'D' && $hadirInjury == 1) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'D')
                                ->update([
                                    'desc' => 'D',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'IP' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUser && $descUser == 'IP' && $hadirInjury == 1) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'IP')
                                ->update([
                                    'desc' => 'IP',
                                    'hadir' => '1',
                                    'total_hour' => $totalHourShift->total_hours - 1,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_hour' => null,
                                    'late_hour' => null,
                                    'overtime_minute' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($scanDateUserTime <= $startWorkUser && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime >= $startWorkUser && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime <= $startWorkUser && $descUser == 'MX' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUser && $descUser == 'MX' && $hadirInjury == 1) {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->where('desc', 'MX')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '1',
                                    'overtime_hour' => $totalHourShift->total_hours,
                                    'overtime_minute' => $totalHourShift->total_minutes,
                                    'total_hour' => null,
                                    'late_hour' => null,
                                    'total_minute' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $log->nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                                ->whereNotNull('start_work')
                                ->where('start_work', '!=', $log->scan_date)
                                ->update([
                                    'desc' => 'L',
                                    'hadir' => '1',
                                    'total_hour' => max(0, $totalHourShift->total_hours - 1),
                                    'overtime_hour' => max(0, $totalHourShift->overtime_hour - 1),
                                    'late_hour' => $totalHourShift->late_hours,
                                    'total_minute' => $totalHourShift->total_minutes,
                                    'overtime_minute' => $totalHourShift->overtime_minutes,
                                    'late_minute' => $totalHourShift->late_minutes,
                                ]);
                        }
                    } else {
                        TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->whereNotNull('start_work')
                            ->where('start_work', '!=', $log->scan_date)
                            ->update([
                                'desc' => null,
                            ]);
                    }
                }
            } else {

                $existingEntry = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->first();

                $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('hadir');

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                $endWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('end_work');

                $startWorkInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                // dd($existingEntry, $hadirInjury, $descUser, $endWorkInjury, $startWorkInjury);

                if ($existingEntry && $hadirInjury == null && $descUser == null && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNull('desc')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                            'desc' => 'TA',
                            'hadir' => '1',
                            'shift' => '0'
                        ]);
                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'TA' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'TA')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == null && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'MX')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->where('desc', 'IP')
                        ->whereNull('start_work')
                        ->update([
                            'start_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == null && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'MX')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'IP')
                        ->update([
                            'end_work' => $log->scan_date,
                            'end_work_info' => $log->sn,
                        ]);
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'end_work' => $log->scan_date,
                            'start_work_info' => $log->sn,
                            'end_work_info' => $log->sn,
                        ]);
                }

                // if (!$existingEntry) {
                //     TestingAbsen::create([
                //         'user_id' => $log->nik,
                //         'date' => $log->scan_date,
                //         'start_work' => $log->scan_date,
                //         'start_work_info' => $log->sn,
                //         'desc' => 'TA',
                //         'hadir' => '1',
                //         'shift' => '0'
                //     ]);
                // } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury == null) {
                //     TestingAbsen::where('user_id', $log->nik)
                //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                //         ->where('desc', 'MX')
                //         ->whereNull('start_work')
                //         ->update([
                //             'start_work' => $log->scan_date,
                //             'start_work_info' => $log->sn,
                //         ]);

                // } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury == null) {
                //     TestingAbsen::where('user_id', $log->nik)
                //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                //         ->where('desc', 'IP')
                //         ->whereNull('start_work')
                //         ->update([
                //             'start_work' => $log->scan_date,
                //             'start_work_info' => $log->sn,
                //         ]);
                // } elseif ($existingEntry && $hadirInjury == 0 && $descUser == 'MX' && $endWorkInjury == null && $startWorkInjury != null) {
                //     TestingAbsen::where('user_id', $log->nik)
                //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                //         ->whereNotNull('start_work')
                //         ->where('start_work', '!=', $log->scan_date)
                //         ->where('desc', 'MX')
                //         ->update([
                //             'end_work' => $log->scan_date,
                //             'end_work_info' => $log->sn,
                //         ]);
                // } elseif ($existingEntry && $hadirInjury == 1 && $descUser == 'IP' && $endWorkInjury == null && $startWorkInjury != null) {
                //     TestingAbsen::where('user_id', $log->nik)
                //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                //         ->whereNotNull('start_work')
                //         ->where('start_work', '!=', $log->scan_date)
                //         ->where('desc', 'IP')
                //         ->update([
                //             'end_work' => $log->scan_date,
                //             'end_work_info' => $log->sn,
                //         ]);
                // } else {
                //     TestingAbsen::where('user_id', $log->nik)
                //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                //         ->whereNotNull('start_work')
                //         ->where('start_work', '!=', $log->scan_date)
                //         ->update([
                //             'end_work' => $log->scan_date,
                //             'start_work_info' => $log->sn,
                //             'end_work_info' => $log->sn,
                //         ]);
                // }

                $descUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('desc');

                $jamMasuk = User::where('nik', $log->nik)
                    ->value('start_work_user');

                $jamMasukJam = Carbon::parse($jamMasuk)->format('H');

                if ($jamMasukJam == '08') {
                    if ($log->sn == "FIO66208023190896") {
                        $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();
                    } else {
                        $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();
                    }
                } else {
                    if ($log->sn == "FIO66208023190896") {
                        $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();
                    } else {
                        $totalHourNonShift = TestingAbsen::where('user_id', $log->nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();
                    }
                }


                // Jam shift (Actual)
                $user = User::where('nik', $log->nik)->first();
                $startWorkUserInjury = $user->start_work_user;
                $startWorkUserTimeInjury = Carbon::parse($startWorkUserInjury)->format('H:i:s');

                // Jam Absen (Origin)
                $scanDateUser = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('start_work');

                $hadirInjury = TestingAbsen::where('user_id', $log->nik)
                    ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                    ->value('hadir');

                // Jam
                $scanDateUserTime = Carbon::parse($scanDateUser)->format('H:i:s');

                $lateCheck = $scanDateUserTime > $startWorkUserTimeInjury;

                if ($lateCheck && $descUser != 'MX' && $hadirInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => 'L',
                            'hadir' => '1',
                            'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                            'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                            'late_hour' => $totalHourNonShift->late_hours,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_minute' => $totalHourNonShift->late_minutes,
                        ]);
                    // echo 'salah 1';
                } elseif (!$lateCheck && $descUser != 'MX' && $hadirInjury != null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => 'H',
                            'hadir' => '1',
                            'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_hour' => null,
                            'late_minute' => null,
                        ]);
                    // echo 'salah 1';
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'D' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'D' && $hadirInjury == 1 || !$lateCheck && $descUser == 'D' && $hadirInjury == 1 || $lateCheck && $descUser == 'D' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'D')
                        ->update([
                            'desc' => 'D',
                            'hadir' => '1',
                            'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                            'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                            'late_hour' => $totalHourNonShift->late_hours,
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                            'late_minute' => $totalHourNonShift->late_minutes,
                        ]);
                    // echo 'salah 2';
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'IP' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'IP' && $hadirInjury == 1 || !$lateCheck && $descUser == 'IP' && $hadirInjury == 1 || $lateCheck && $descUser == 'IP' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'IP')
                        ->update([
                            'desc' => 'IP',
                            'hadir' => '1',
                            'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'overtime_hour' => null,
                            'late_hour' => null,
                            'overtime_minute' => null,
                            'late_minute' => null,
                        ]);
                    // echo 'salah 3';
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'TA' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'TA' && $hadirInjury == 1 || !$lateCheck && $descUser == 'TA' && $hadirInjury == 1 || $lateCheck && $descUser == 'TA' && $hadirInjury == 1) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'TA')
                        ->update([
                            'desc' => 'TA',
                            'hadir' => '1',
                            'total_hour' => null,
                            'total_minute' => null,
                            'overtime_hour' => null,
                            'late_hour' => null,
                            'overtime_minute' => null,
                            'late_minute' => null,
                        ]);
                    // echo 'salah 3';
                } elseif ($scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 0 || $scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 1 || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == 1 || $scanDateUserTime <= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == null || $scanDateUserTime >= $startWorkUserTimeInjury && $descUser == 'MX' && $hadirInjury == null || !$lateCheck && $descUser == 'MX' && $hadirInjury == 0 || !$lateCheck && $descUser == 'MX' && $hadirInjury == 1 || !$lateCheck && $descUser == 'MX' && $hadirInjury == null || $lateCheck && $descUser == 'MX' && $hadirInjury == 0 || $lateCheck && $descUser == 'MX' && $hadirInjury == 1 || $lateCheck && $descUser == 'MX' && $hadirInjury == null) {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->where('desc', 'MX')
                        ->update([
                            'desc' => 'MX',
                            'hadir' => '1',
                            'overtime_hour' => $totalHourNonShift->total_hours,
                            'overtime_minute' => $totalHourNonShift->total_minutes,
                            'total_hour' => null,
                            'late_hour' => null,
                            'total_minute' => null,
                            'late_minute' => null,
                        ]);
                    // echo 'benar';
                } else {
                    TestingAbsen::where('user_id', $log->nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
                        ->whereNotNull('start_work')
                        ->where('start_work', '!=', $log->scan_date)
                        ->update([
                            'desc' => 'H',
                            'hadir' => '1',
                            'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                            'total_minute' => $totalHourNonShift->total_minutes,
                            'late_hour' => $totalHourNonShift->late_hours,
                            'late_minute' => $totalHourNonShift->late_minutes,
                            'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                            'overtime_minute' => $totalHourNonShift->overtime_minutes,
                        ]);
                    // echo 'salah 4';
                }
            }

            // Update data dengan desc D
            // if ($existingEntry) {
            //     TestingAbsen::where('user_id', $log->nik)
            //         ->whereDate('date', '=', date('Y-m-d', strtotime($log->scan_date)))
            //         ->whereNotNull('start_work')
            //         ->where('start_work', '!=', $log->scan_date)
            //         ->where('desc', 'D')
            //         ->update([
            //             'end_work' => $log->scan_date,
            //             'end_work_info' => $log->sn,
            //             'desc' => 'D',
            //             'hadir' => '1',
            //         ]);
            // }

        }
        return response()->json(['message' => 'Data berhasil diperbarui.'], 200);
    }

    private function update_data_without_attlog()
    {
        $firstDate = '2024-01-26';

        $dataKehadiran = TestingAbsen::whereDate('date', $firstDate)
            ->whereNotNull('start_work')
            ->whereNotNull('end_work')
            ->whereIn('desc', ['IP', 'D', 'I', 'H'])
            ->select('user_id', 'date', 'start_work', 'end_work', 'desc', 'hadir', 'shift')
            ->get();

        return $dataKehadiran;
    }

    // public function update_shift_new(Request $request)
    // {
    //     // $firstDate = '2024-02-03';
    //     // $lastDate = '2024-02-03';
    //     // $firstDate = '2024-02-10';
    //     // $lastDate = '2024-02-10';
    //     $firstDate = '2024-02-17';
    //     $lastDate = '2024-02-17';
    //     // $firstDate = '2024-02-24';
    //     // $lastDate = '2024-02-24';
    //     $nik = '200-137';

    //     $attLogData = TestingKitaServer::where('nik', $nik)
    //         // ->whereDate('scan_date', '>=', $firstDate)
    //         // ->whereDate('scan_date', '<=', $lastDate)
    //         ->whereBetween('scan_date', [$firstDate, $lastDate])
    //         ->select('id', 'nik', 'scan_date', 'sn')
    //         ->get();

    //     if ($attLogData->isEmpty()) {

    //         // TestingAbsen::whereNull('start_work')
    //         //     ->whereNull('end_work')
    //         //     ->whereNull('desc')
    //         //     ->whereDate('date', $firstDate)
    //         //     ->update([
    //         //         'desc' => 'M',
    //         //         'hadir' => '0',
    //         //     ]);

    //         TestingAbsen::whereBetween('date', [$firstDate, $lastDate])
    //             // ->whereDate('date', '>=', $firstDate)
    //             // ->whereDate('date', '<=', $lastDate)
    //             ->whereNull('start_work')
    //             ->whereNull('end_work')
    //             ->where('user_id', $nik)
    //             ->whereNull('desc')
    //             ->where(function ($query) {
    //                 $query->whereRaw('DAYOFWEEK(date) = 7');
    //             })
    //             ->update([
    //                 'desc' => 'MX',
    //                 'hadir' => null,
    //             ]);

    //         TestingAbsen::whereBetween('date', [$firstDate, $lastDate])
    //             // ->whereDate('date', '>=', $firstDate)
    //             // ->whereDate('date', '<=', $lastDate)
    //             ->whereNull('start_work')
    //             ->whereNull('end_work')
    //             ->where('user_id', $nik)
    //             ->whereNull('desc')
    //             ->where(function ($query) {
    //                 $query->whereRaw('DAYOFWEEK(date) != 7');
    //             })
    //             ->update([
    //                 'desc' => 'M',
    //                 'hadir' => '0',
    //             ]);

    //         $result = TestingAbsen::whereBetween('date', [$firstDate, $lastDate])
    //             // ->whereDate('date', '>=', $firstDate)
    //             // ->whereDate('date', '<=', $lastDate)
    //             ->whereNotNull('start_work')
    //             ->whereNotNull('end_work')
    //             ->where('user_id', $nik)
    //             ->whereNull('total_hour')
    //             ->whereIn('desc', ['IP', 'D', 'I', 'H'])
    //             ->select('user_id', 'date', 'start_work', 'end_work', 'desc', 'hadir', 'shift')
    //             ->get();

    //         // dd($result);

    //         foreach ($result as $data) {
    //             $nik = $data->user_id;

    //             if (!Str::contains($nik, '-')) {
    //                 $length = strlen($nik);
    //                 $nik = substr_replace($nik, '-', $length - 3, 0);
    //             }

    //             $todayDay = Carbon::parse($data->date)->format('l');

    //             $existingData = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                 ->first();

    //             $scanDateData = Carbon::parse($data->scan_date)->format('H:i');

    //             $getDesc = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                 ->value('desc');

    //             $getHadir = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                 ->value('hadir');

    //             $getShift = ShiftArchive::where('nik', $nik)
    //                 ->whereDate('start_date', '<=', date('Y-m-d', strtotime($data->date)))
    //                 ->whereDate('end_date', '>=', date('Y-m-d', strtotime($data->date)))
    //                 ->value('shift');

    //             $workLoc = User::where('nik', $nik)->value('loc_kerja');
    //             $userJabatan = User::where('nik', $nik)->value('jabatan');
    //             $startWorkUser = User::where('nik', $nik)->value('start_work_user');

    //             $scanDateTime = Carbon::parse($existingData->start_work)->format('H:i');
    //             $startWorkUserTime = Carbon::parse($startWorkUser)->format('H:i');
    //             $startWorkUserHour = Carbon::parse($startWorkUser)->format('H');

    //             if ($workLoc == 'Head Office') {
    //                 if ($startWorkUserHour == '08') {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }

    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }

    //                     } else {

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Friday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } elseif ($workLoc == 'Workshop') {
    //                 if ($startWorkUserHour == '08') {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->where('start_work', '!=', $data->date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Friday') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } elseif ($workLoc == 'Factory') {
    //                 if ($todayDay == 'Saturday') {
    //                     if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                         echo 'Jabatan 1';
    //                     } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {
    //                             if ($data->date) {
    //                                 if ($existingData->start_work) {
    //                                     if ($getDesc == 'TA') {
    //                                         if ($scanDateTime > $startWorkUserTime) {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                                 ->where('start_work', '!=', $data->date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->where('hadir', '1')
    //                                                 ->update([
    //                                                     'end_work' => $data->date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'L',
    //                                                 ]);
    //                                         } else {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                                 ->where('start_work', '!=', $data->date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->update([
    //                                                     'end_work' => $data->date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'H',
    //                                                 ]);
    //                                         }
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'IP',
    //                                             ]);
    //                                     } elseif ($getDesc == 'D') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'D')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'D',
    //                                             ]);
    //                                     }
    //                                 } else {
    //                                     if ($getDesc == null) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                             ]);
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } elseif ($getShift == '2') {
    //                             if ($data->date) {
    //                                 if ($existingData->start_work) {
    //                                     if ($getDesc == 'TA') {
    //                                         if ($scanDateTime > $startWorkUserTime) {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                                 ->where('start_work', '!=', $data->date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->where('hadir', '1')
    //                                                 ->update([
    //                                                     'end_work' => $data->date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'L',
    //                                                 ]);
    //                                         } else {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                                 ->where('start_work', '!=', $data->date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->update([
    //                                                     'end_work' => $data->date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'H',
    //                                                 ]);
    //                                         }
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'IP',
    //                                             ]);
    //                                     } elseif ($getDesc == 'D') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'D')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'D',
    //                                             ]);
    //                                     }
    //                                 } else {
    //                                     if ($getDesc == null) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                             ]);
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "14:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"14:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } elseif ($getShift == '3') {
    //                             if ($data->date) {
    //                                 if ($existingData->start_work) {

    //                                     // Sub day scan date
    //                                     $absentDate = Carbon::parse($data->date)->subDay()->format('Y-m-d');

    //                                     // Cek data H-1
    //                                     $existingEntryA = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($absentDate)))
    //                                         ->first();

    //                                     // Cek data hari H
    //                                     $existingEntryB = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->first();

    //                                     // Get end work
    //                                     $endWorkInjury = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->value('end_work');

    //                                     // Get start work
    //                                     $startWorkInjury = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->value('start_work');

    //                                     if ($existingEntryA && !$existingEntryB) {
    //                                         $cekShift = ShiftArchive::where('nik', $data->nik)
    //                                             ->whereDate('start_date', '<=', $absentDate)
    //                                             ->whereDate('end_date', '>=', $absentDate)
    //                                             ->value('shift');
    //                                         if ($cekShift == '3') {
    //                                             $endWorkCheck = $existingEntryA->end_work;
    //                                             if ($endWorkCheck == null) {
    //                                                 if ($getDesc == 'TA') {
    //                                                     if ($scanDateTime > $startWorkUserTime) {
    //                                                         TestingAbsen::whereNotNull('start_work')
    //                                                             ->where('user_id', $nik)
    //                                                             ->whereDate('date', '=', $absentDate)
    //                                                             ->where('start_work', '!=', $data->date)
    //                                                             ->where('desc', 'TA')
    //                                                             ->where('hadir', '1')
    //                                                             ->update([
    //                                                                 'end_work' => $data->date,
    //                                                                 'end_work_info' => $data->sn,
    //                                                                 'desc' => 'L',
    //                                                             ]);
    //                                                     } else {
    //                                                         TestingAbsen::whereNotNull('start_work')
    //                                                             ->where('user_id', $nik)
    //                                                             ->whereDate('date', '=', $absentDate)
    //                                                             ->where('start_work', '!=', $data->date)
    //                                                             ->where('desc', 'TA')
    //                                                             ->update([
    //                                                                 'end_work' => $data->date,
    //                                                                 'end_work_info' => $data->sn,
    //                                                                 'desc' => 'H',
    //                                                             ]);
    //                                                     }
    //                                                 } elseif ($getDesc == 'IP') {
    //                                                     TestingAbsen::whereNotNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('start_work', '!=', $data->date)
    //                                                         ->where('desc', 'IP')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'end_work' => $data->date,
    //                                                             'end_work_info' => $data->sn,
    //                                                             'desc' => 'IP',
    //                                                         ]);
    //                                                 } elseif ($getDesc == 'D') {
    //                                                     TestingAbsen::whereNotNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('start_work', '!=', $data->date)
    //                                                         ->where('desc', 'D')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'end_work' => $data->date,
    //                                                             'end_work_info' => $data->sn,
    //                                                             'desc' => 'D',
    //                                                         ]);
    //                                                 }
    //                                             } else {
    //                                                 if ($getDesc == null) {
    //                                                     TestingAbsen::whereNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->whereNull('desc')
    //                                                         ->update([
    //                                                             'start_work' => $data->date,
    //                                                             'start_work_info' => $data->sn,
    //                                                             'desc' => 'TA',
    //                                                             'hadir' => '1',
    //                                                         ]);
    //                                                 } elseif ($getDesc == 'IP') {
    //                                                     TestingAbsen::whereNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('desc', 'IP')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'start_work' => $data->date,
    //                                                             'start_work_info' => $data->sn,
    //                                                         ]);
    //                                                 }
    //                                             }
    //                                         }
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "23:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"23:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } else {

    //                         }
    //                         echo 'Jabatan 3';
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } elseif ($todayDay == 'Sunday') {
    //                     if ($data->date) {
    //                         if ($existingData->start_work) {
    //                             TestingAbsen::whereNotNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->where('start_work', '!=', $data->date)
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', '1')
    //                                 ->update([
    //                                     'end_work' => $data->date,
    //                                     'end_work_info' => $data->sn,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'start_work' => $data->date,
    //                                     'start_work_info' => $data->sn,
    //                                     'hadir' => 1,
    //                                     'desc' => 'MX'
    //                                 ]);
    //                         }
    //                     } else {
    //                         TestingAbsen::whereNull('start_work')
    //                             ->where('user_id', $nik)
    //                             ->whereNull('end_work')
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->whereNull('desc')
    //                             ->update([
    //                                 'desc' => 'MX',
    //                                 'hadir' => '0',
    //                             ]);
    //                     }

    //                     $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                         ->select([
    //                             'test_absen_regs.date as date',
    //                             DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                             DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                             DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                             DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                             DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                             DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                         ])
    //                         ->first();

    //                     if ($getDesc == 'MX' && $getHadir == 1) {
    //                         TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->whereNotNull('start_work')
    //                             ->whereNotNull('end_work')
    //                             ->where('desc', 'MX')
    //                             ->where('hadir', 1)
    //                             ->update([
    //                                 'total_hour' => null,
    //                                 'total_minute' => null,
    //                                 'overtime_hour' => $totalHourNonShift->total_hours,
    //                                 'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                 'late_hour' => null,
    //                                 'late_minute' => null,
    //                             ]);
    //                     } else {
    //                         TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->whereNotNull('start_work')
    //                             ->whereNotNull('end_work')
    //                             ->where('desc', 'MX')
    //                             ->where('hadir', 0)
    //                             ->update([
    //                                 'total_hour' => null,
    //                                 'total_minute' => null,
    //                                 'overtime_hour' => null,
    //                                 'overtime_minute' => null,
    //                                 'late_hour' => null,
    //                                 'late_minute' => null,
    //                             ]);
    //                     }
    //                 } elseif ($todayDay == 'Friday') {
    //                     if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {

    //                         } elseif ($getShift == '2') {

    //                         } elseif ($getShift == '3') {

    //                         } else {

    //                         }
    //                         echo 'Jabatan 3';
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {

    //                         } elseif ($getShift == '2') {

    //                         } elseif ($getShift == '3') {

    //                         } else {

    //                         }
    //                         echo 'Jabatan 2';
    //                     } else {
    //                         if ($data->date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->where('start_work', '!=', $data->date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('start_work', '!=', $data->date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } else {
    //                 echo 'Kebun';
    //             }
    //         }
    //     } else {

    //         foreach ($attLogData as $data) {
    //             $nik = $data->nik;
    //             if (!Str::contains($nik, '-')) {
    //                 $length = strlen($nik);
    //                 $nik = substr_replace($nik, '-', $length - 3, 0);
    //             }

    //             $todayDay = Carbon::parse($data->scan_date)->format('l');

    //             $existingData = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                 ->first();

    //             $scanDateData = Carbon::parse($data->scan_date)->format('H:i');

    //             $getDesc = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                 ->value('desc');

    //             $getHadir = TestingAbsen::where('user_id', $nik)
    //                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                 ->value('hadir');

    //             $getShift = ShiftArchive::where('nik', $nik)
    //                 ->whereDate('start_date', '<=', date('Y-m-d', strtotime($data->scan_date)))
    //                 ->whereDate('end_date', '>=', date('Y-m-d', strtotime($data->scan_date)))
    //                 ->value('shift');

    //             $workLoc = User::where('nik', $nik)->value('loc_kerja');
    //             $userJabatan = User::where('nik', $nik)->value('jabatan');
    //             $startWorkUser = User::where('nik', $nik)->value('start_work_user');

    //             $scanDateTime = Carbon::parse($existingData->start_work)->format('H:i');
    //             $startWorkUserTime = Carbon::parse($startWorkUser)->format('H:i');
    //             $startWorkUserHour = Carbon::parse($startWorkUser)->format('H');

    //             if ($workLoc == 'Head Office') {
    //                 if ($startWorkUserHour == '08') {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }

    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }

    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateData > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Friday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } elseif ($workLoc == 'Workshop') {
    //                 if ($startWorkUserHour == '08') {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minute,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($todayDay == 'Saturday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Sunday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 TestingAbsen::whereNotNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->where('start_work', '!=', $data->scan_date)
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', '1')
    //                                     ->update([
    //                                         'end_work' => $data->scan_date,
    //                                         'end_work_info' => $data->sn,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'start_work' => $data->scan_date,
    //                                         'start_work_info' => $data->sn,
    //                                         'hadir' => 1,
    //                                         'desc' => 'MX'
    //                                     ]);
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'MX',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'MX' && $getHadir == 1) {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 0)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($todayDay == 'Friday') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } elseif ($workLoc == 'Factory') {
    //                 if ($todayDay == 'Saturday') {
    //                     if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                         echo 'Jabatan 1';
    //                     } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {
    //                             if ($data->scan_date) {
    //                                 if ($existingData->start_work) {
    //                                     if ($getDesc == 'TA') {
    //                                         if ($scanDateTime > $startWorkUserTime) {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                                 ->where('start_work', '!=', $data->scan_date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->where('hadir', '1')
    //                                                 ->update([
    //                                                     'end_work' => $data->scan_date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'L',
    //                                                 ]);
    //                                         } else {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                                 ->where('start_work', '!=', $data->scan_date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->update([
    //                                                     'end_work' => $data->scan_date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'H',
    //                                                 ]);
    //                                         }
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'IP',
    //                                             ]);
    //                                     } elseif ($getDesc == 'D') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'D')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'D',
    //                                             ]);
    //                                     }
    //                                 } else {
    //                                     if ($getDesc == null) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                             ]);
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } elseif ($getShift == '2') {
    //                             if ($data->scan_date) {
    //                                 if ($existingData->start_work) {
    //                                     if ($getDesc == 'TA') {
    //                                         if ($scanDateTime > $startWorkUserTime) {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                                 ->where('start_work', '!=', $data->scan_date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->where('hadir', '1')
    //                                                 ->update([
    //                                                     'end_work' => $data->scan_date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'L',
    //                                                 ]);
    //                                         } else {
    //                                             TestingAbsen::whereNotNull('start_work')
    //                                                 ->where('user_id', $nik)
    //                                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                                 ->where('start_work', '!=', $data->scan_date)
    //                                                 ->where('desc', 'TA')
    //                                                 ->update([
    //                                                     'end_work' => $data->scan_date,
    //                                                     'end_work_info' => $data->sn,
    //                                                     'desc' => 'H',
    //                                                 ]);
    //                                         }
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'IP',
    //                                             ]);
    //                                     } elseif ($getDesc == 'D') {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'D')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'D',
    //                                             ]);
    //                                     }
    //                                 } else {
    //                                     if ($getDesc == null) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } elseif ($getDesc == 'IP') {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('desc', 'IP')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                             ]);
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "14:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"14:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } elseif ($getShift == '3') {
    //                             if ($data->scan_date) {
    //                                 if ($existingData->start_work) {

    //                                     // Sub day scan date
    //                                     $absentDate = Carbon::parse($data->scan_date)->subDay()->format('Y-m-d');

    //                                     // Cek data H-1
    //                                     $existingEntryA = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($absentDate)))
    //                                         ->first();

    //                                     // Cek data hari H
    //                                     $existingEntryB = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->first();

    //                                     // Get end work
    //                                     $endWorkInjury = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->value('end_work');

    //                                     // Get start work
    //                                     $startWorkInjury = TestingAbsen::where('user_id', $data->nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->value('start_work');

    //                                     if ($existingEntryA && !$existingEntryB) {
    //                                         $cekShift = ShiftArchive::where('nik', $data->nik)
    //                                             ->whereDate('start_date', '<=', $absentDate)
    //                                             ->whereDate('end_date', '>=', $absentDate)
    //                                             ->value('shift');
    //                                         if ($cekShift == '3') {
    //                                             $endWorkCheck = $existingEntryA->end_work;
    //                                             if ($endWorkCheck == null) {
    //                                                 if ($getDesc == 'TA') {
    //                                                     if ($scanDateTime > $startWorkUserTime) {
    //                                                         TestingAbsen::whereNotNull('start_work')
    //                                                             ->where('user_id', $nik)
    //                                                             ->whereDate('date', '=', $absentDate)
    //                                                             ->where('start_work', '!=', $data->scan_date)
    //                                                             ->where('desc', 'TA')
    //                                                             ->where('hadir', '1')
    //                                                             ->update([
    //                                                                 'end_work' => $data->scan_date,
    //                                                                 'end_work_info' => $data->sn,
    //                                                                 'desc' => 'L',
    //                                                             ]);
    //                                                     } else {
    //                                                         TestingAbsen::whereNotNull('start_work')
    //                                                             ->where('user_id', $nik)
    //                                                             ->whereDate('date', '=', $absentDate)
    //                                                             ->where('start_work', '!=', $data->scan_date)
    //                                                             ->where('desc', 'TA')
    //                                                             ->update([
    //                                                                 'end_work' => $data->scan_date,
    //                                                                 'end_work_info' => $data->sn,
    //                                                                 'desc' => 'H',
    //                                                             ]);
    //                                                     }
    //                                                 } elseif ($getDesc == 'IP') {
    //                                                     TestingAbsen::whereNotNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('start_work', '!=', $data->scan_date)
    //                                                         ->where('desc', 'IP')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'end_work' => $data->scan_date,
    //                                                             'end_work_info' => $data->sn,
    //                                                             'desc' => 'IP',
    //                                                         ]);
    //                                                 } elseif ($getDesc == 'D') {
    //                                                     TestingAbsen::whereNotNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('start_work', '!=', $data->scan_date)
    //                                                         ->where('desc', 'D')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'end_work' => $data->scan_date,
    //                                                             'end_work_info' => $data->sn,
    //                                                             'desc' => 'D',
    //                                                         ]);
    //                                                 }
    //                                             } else {
    //                                                 if ($getDesc == null) {
    //                                                     TestingAbsen::whereNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->whereNull('desc')
    //                                                         ->update([
    //                                                             'start_work' => $data->scan_date,
    //                                                             'start_work_info' => $data->sn,
    //                                                             'desc' => 'TA',
    //                                                             'hadir' => '1',
    //                                                         ]);
    //                                                 } elseif ($getDesc == 'IP') {
    //                                                     TestingAbsen::whereNull('start_work')
    //                                                         ->where('user_id', $nik)
    //                                                         ->whereDate('date', '=', $absentDate)
    //                                                         ->where('desc', 'IP')
    //                                                         ->where('hadir', '1')
    //                                                         ->update([
    //                                                             'start_work' => $data->scan_date,
    //                                                             'start_work_info' => $data->sn,
    //                                                         ]);
    //                                                 }
    //                                             }
    //                                         }
    //                                     }
    //                                 }
    //                             } else {
    //                                 TestingAbsen::whereNull('start_work')
    //                                     ->where('user_id', $nik)
    //                                     ->whereNull('end_work')
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNull('desc')
    //                                     ->update([
    //                                         'desc' => 'M',
    //                                         'hadir' => '0',
    //                                     ]);
    //                             }

    //                             $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->select([
    //                                     'test_absen_regs.date as date',
    //                                     DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                     DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                     DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "23:05:00")))) ELSE 0 END) as late_minutes'),
    //                                     DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"23:05:00")))) ELSE 0 END) as late_hours'),
    //                                 ])
    //                                 ->first();

    //                             if ($getDesc == 'H') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'H')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'L') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'D') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'D')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } elseif ($getDesc == 'IP') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'IP')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } elseif ($getDesc == 'MX') {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'MX')
    //                                     ->where('hadir', 1)
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => $totalHourNonShift->total_hours,
    //                                         'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => null,
    //                                         'late_minute' => null,
    //                                     ]);
    //                             }
    //                         } else {

    //                         }
    //                         echo 'Jabatan 3';
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } elseif ($todayDay == 'Sunday') {
    //                     if ($data->scan_date) {
    //                         if ($existingData->start_work) {
    //                             TestingAbsen::whereNotNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->where('start_work', '!=', $data->scan_date)
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', '1')
    //                                 ->update([
    //                                     'end_work' => $data->scan_date,
    //                                     'end_work_info' => $data->sn,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'start_work' => $data->scan_date,
    //                                     'start_work_info' => $data->sn,
    //                                     'hadir' => 1,
    //                                     'desc' => 'MX'
    //                                 ]);
    //                         }
    //                     } else {
    //                         TestingAbsen::whereNull('start_work')
    //                             ->where('user_id', $nik)
    //                             ->whereNull('end_work')
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->whereNull('desc')
    //                             ->update([
    //                                 'desc' => 'MX',
    //                                 'hadir' => '0',
    //                             ]);
    //                     }

    //                     $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                         ->select([
    //                             'test_absen_regs.date as date',
    //                             DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                             DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                             DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                             DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                             DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
    //                             DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
    //                         ])
    //                         ->first();

    //                     if ($getDesc == 'MX' && $getHadir == 1) {
    //                         TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->whereNotNull('start_work')
    //                             ->whereNotNull('end_work')
    //                             ->where('desc', 'MX')
    //                             ->where('hadir', 1)
    //                             ->update([
    //                                 'total_hour' => null,
    //                                 'total_minute' => null,
    //                                 'overtime_hour' => $totalHourNonShift->total_hours,
    //                                 'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                 'late_hour' => null,
    //                                 'late_minute' => null,
    //                             ]);
    //                     } else {
    //                         TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->whereNotNull('start_work')
    //                             ->whereNotNull('end_work')
    //                             ->where('desc', 'MX')
    //                             ->where('hadir', 0)
    //                             ->update([
    //                                 'total_hour' => null,
    //                                 'total_minute' => null,
    //                                 'overtime_hour' => null,
    //                                 'overtime_minute' => null,
    //                                 'late_hour' => null,
    //                                 'late_minute' => null,
    //                             ]);
    //                     }
    //                 } elseif ($todayDay == 'Friday') {
    //                     if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'TA') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'TA')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {

    //                         } elseif ($getShift == '2') {

    //                         } elseif ($getShift == '3') {

    //                         } else {

    //                         }
    //                         echo 'Jabatan 3';
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => $totalHourNonShift->total_hours,
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 } else {
    //                     if ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     } elseif ($userJabatan == 'Worker WWTP') {
    //                         if ($getShift == '1') {

    //                         } elseif ($getShift == '2') {

    //                         } elseif ($getShift == '3') {

    //                         } else {

    //                         }
    //                         echo 'Jabatan 2';
    //                     } else {
    //                         if ($data->scan_date) {
    //                             if ($existingData->start_work) {
    //                                 if ($getDesc == 'TA') {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->where('hadir', '1')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNotNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->where('start_work', '!=', $data->scan_date)
    //                                             ->where('desc', 'TA')
    //                                             ->update([
    //                                                 'end_work' => $data->scan_date,
    //                                                 'end_work_info' => $data->sn,
    //                                                 'desc' => 'H',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'L') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'L')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'IP',
    //                                         ]);
    //                                 } elseif ($getDesc == 'D') {
    //                                     TestingAbsen::whereNotNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('start_work', '!=', $data->scan_date)
    //                                         ->where('desc', 'D')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'end_work' => $data->scan_date,
    //                                             'end_work_info' => $data->sn,
    //                                             'desc' => 'D',
    //                                         ]);
    //                                 }
    //                             } else {
    //                                 if ($getDesc == null) {
    //                                     if ($scanDateTime > $startWorkUserTime) {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'L',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     } else {
    //                                         TestingAbsen::whereNull('start_work')
    //                                             ->where('user_id', $nik)
    //                                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                             ->whereNull('desc')
    //                                             ->update([
    //                                                 'start_work' => $data->scan_date,
    //                                                 'start_work_info' => $data->sn,
    //                                                 'desc' => 'TA',
    //                                                 'hadir' => '1',
    //                                             ]);
    //                                     }
    //                                 } elseif ($getDesc == 'M') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'M')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'desc' => 'TA',
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'MX') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'MX')
    //                                         ->where('hadir', '0')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                             'hadir' => '1',
    //                                         ]);
    //                                 } elseif ($getDesc == 'IP') {
    //                                     TestingAbsen::whereNull('start_work')
    //                                         ->where('user_id', $nik)
    //                                         ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                         ->where('desc', 'IP')
    //                                         ->where('hadir', '1')
    //                                         ->update([
    //                                             'start_work' => $data->scan_date,
    //                                             'start_work_info' => $data->sn,
    //                                         ]);
    //                                 }
    //                             }
    //                         } else {
    //                             TestingAbsen::whereNull('start_work')
    //                                 ->where('user_id', $nik)
    //                                 ->whereNull('end_work')
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNull('desc')
    //                                 ->update([
    //                                     'desc' => 'M',
    //                                     'hadir' => '0',
    //                                 ]);
    //                         }

    //                         $totalHourNonShift = TestingAbsen::where('user_id', $nik)
    //                             ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                             ->select([
    //                                 'test_absen_regs.date as date',
    //                                 DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
    //                                 DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
    //                                 DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
    //                                 DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
    //                             ])
    //                             ->first();

    //                         if ($getDesc == 'H') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'H')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'L') {
    //                             if ($existingData->end_work == null) {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => null,
    //                                         'total_minute' => null,
    //                                         'overtime_hour' => null,
    //                                         'overtime_minute' => null,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             } else {
    //                                 TestingAbsen::where('user_id', $nik)
    //                                     ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                     ->whereNotNull('start_work')
    //                                     ->whereNotNull('end_work')
    //                                     ->where('desc', 'L')
    //                                     ->update([
    //                                         'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                         'total_minute' => $totalHourNonShift->total_minutes,
    //                                         'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                         'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                         'late_hour' => $totalHourNonShift->late_hours,
    //                                         'late_minute' => $totalHourNonShift->late_minutes,
    //                                     ]);
    //                             }
    //                         } elseif ($getDesc == 'D') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'D')
    //                                 ->update([
    //                                     'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
    //                                     'overtime_minute' => $totalHourNonShift->overtime_minutes,
    //                                     'late_hour' => $totalHourNonShift->late_hours,
    //                                     'late_minute' => $totalHourNonShift->late_minutes,
    //                                 ]);
    //                         } elseif ($getDesc == 'IP') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'IP')
    //                                 ->update([
    //                                     'total_hour' => $totalHourNonShift->total_hours,
    //                                     'total_minute' => $totalHourNonShift->total_minutes,
    //                                     'overtime_hour' => $totalHourNonShift->overtime_hour,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } elseif ($getDesc == 'MX') {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->where('desc', 'MX')
    //                                 ->where('hadir', 1)
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => $totalHourNonShift->total_hours,
    //                                     'overtime_minute' => $totalHourNonShift->total_minutes,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         } else {
    //                             TestingAbsen::where('user_id', $nik)
    //                                 ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
    //                                 ->whereNotNull('start_work')
    //                                 ->whereNotNull('end_work')
    //                                 ->update([
    //                                     'total_hour' => null,
    //                                     'total_minute' => null,
    //                                     'overtime_hour' => null,
    //                                     'overtime_minute' => null,
    //                                     'late_hour' => null,
    //                                     'late_minute' => null,
    //                                 ]);
    //                         }
    //                     }
    //                 }
    //             } else {
    //                 echo 'Kebun';
    //             }
    //         }
    //     }
    // }

    public function update_shift_new(Request $request)
    {
        $firstDate = '2024-03-05';
        $lastDate = '2024-03-06';

        $attLogData = TestingKitaServer::where('sn', 'FIO66206022260004')
            ->whereDate('scan_date', '>=', $firstDate)
            ->whereDate('scan_date', '<=', $lastDate)
            ->select('id', 'nik', 'scan_date', 'sn')
            ->get();

        foreach ($attLogData as $data) {
            $nik = $data->nik;
            if (!Str::contains($nik, '-')) {
                $length = strlen($nik);
                $nik = substr_replace($nik, '-', $length - 3, 0);
            }

            $todayDay = Carbon::parse($data->scan_date)->format('l');

            $existingData = TestingAbsen::where('user_id', $nik)
                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                ->first();

            $getDesc = TestingAbsen::where('user_id', $nik)
                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                ->value('desc');

            $getHadir = TestingAbsen::where('user_id', $nik)
                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                ->value('hadir');

            $getShift = ShiftArchive::where('nik', $nik)
                ->whereDate('start_date', '<=', date('Y-m-d', strtotime($data->scan_date)))
                ->whereDate('end_date', '>=', date('Y-m-d', strtotime($data->scan_date)))
                ->value('shift');

            $workLoc = User::where('nik', $nik)->value('loc_kerja');
            $userJabatan = User::where('nik', $nik)->value('jabatan');
            $startWorkUser = User::where('nik', $nik)->value('start_work_user');

            $scanDateTime = Carbon::parse($existingData->start_work)->format('H:i');
            $startWorkUserTime = Carbon::parse($startWorkUser)->format('H:i');
            $startWorkUserHour = Carbon::parse($startWorkUser)->format('H');

            if ($workLoc == 'Head Office') {
                if ($startWorkUserHour == '08') {
                    if ($todayDay == 'Saturday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->whereNull('end_work')
                                    ->where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->whereNull('end_work')
                                    ->where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    // ->whereNull('desc')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                        'desc' => 'MX'
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }

                    } elseif ($todayDay == 'Sunday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->whereNull('end_work')
                                    ->where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->whereNull('end_work')
                                    ->where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                        'desc' => 'MX'
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }

                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                } else {
                    if ($todayDay == 'Saturday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'TA') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'TA')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($todayDay == 'Sunday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('desc', 'MX')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($todayDay == 'Friday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'TA') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'TA')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minute,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minute,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                }
            } elseif ($workLoc == 'Workshop') {
                if ($startWorkUserHour == '08') {
                    if ($todayDay == 'Saturday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                        'desc' => 'MX'
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($todayDay == 'Sunday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                        'desc' => 'MX'
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN HOUR(TIMEDIFF(end_work, start_work)) - 8 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 8 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minute,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                } else {
                    if ($todayDay == 'Saturday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($todayDay == 'Sunday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                TestingAbsen::whereNotNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->where('start_work', '!=', $data->scan_date)
                                    ->where('desc', 'MX')
                                    ->where('hadir', '1')
                                    ->update([
                                        'end_work' => $data->scan_date,
                                        'end_work_info' => $data->sn,
                                    ]);
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'start_work' => $data->scan_date,
                                        'start_work_info' => $data->sn,
                                        'hadir' => 1,
                                        'desc' => 'MX'
                                    ]);
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'MX',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'MX' && $getHadir == 1) {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 0)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($todayDay == 'Friday') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                }
            } elseif ($workLoc == 'Factory') {
                if ($todayDay == 'Saturday') {
                    if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 5 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                        echo 'Jabatan 1';
                    } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($userJabatan == 'Worker WWTP') {
                        if ($getShift == '1') {
                            if ($data->scan_date) {
                                if ($existingData->start_work) {
                                    if ($getDesc == 'TA') {
                                        if ($scanDateTime > $startWorkUserTime) {
                                            TestingAbsen::whereNotNull('start_work')
                                                ->where('user_id', $nik)
                                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                                ->where('start_work', '!=', $data->scan_date)
                                                ->where('desc', 'TA')
                                                ->where('hadir', '1')
                                                ->update([
                                                    'end_work' => $data->scan_date,
                                                    'end_work_info' => $data->sn,
                                                    'desc' => 'L',
                                                ]);
                                        } else {
                                            TestingAbsen::whereNotNull('start_work')
                                                ->where('user_id', $nik)
                                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                                ->where('start_work', '!=', $data->scan_date)
                                                ->where('desc', 'TA')
                                                ->update([
                                                    'end_work' => $data->scan_date,
                                                    'end_work_info' => $data->sn,
                                                    'desc' => 'H',
                                                ]);
                                        }
                                    } elseif ($getDesc == 'IP') {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'IP')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'IP',
                                            ]);
                                    } elseif ($getDesc == 'D') {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'D')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'D',
                                            ]);
                                    }
                                } else {
                                    if ($getDesc == null) {
                                        TestingAbsen::whereNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->whereNull('desc')
                                            ->update([
                                                'start_work' => $data->scan_date,
                                                'start_work_info' => $data->sn,
                                                'desc' => 'TA',
                                                'hadir' => '1',
                                            ]);
                                    } elseif ($getDesc == 'IP') {
                                        TestingAbsen::whereNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('desc', 'IP')
                                            ->where('hadir', '1')
                                            ->update([
                                                'start_work' => $data->scan_date,
                                                'start_work_info' => $data->sn,
                                            ]);
                                    }
                                }
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'desc' => 'M',
                                        'hadir' => '0',
                                    ]);
                            }

                            $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->select([
                                    'test_absen_regs.date as date',
                                    DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                    DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                                ])
                                ->first();

                            if ($getDesc == 'H') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'H')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'L') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'L')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'D') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'D')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'IP') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'IP')
                                    ->update([
                                        'total_hour' => $totalHourNonShift->total_hours,
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => $totalHourNonShift->overtime_hour,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } elseif ($getDesc == 'MX') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'MX')
                                    ->where('hadir', 1)
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => $totalHourNonShift->total_hours,
                                        'overtime_minute' => $totalHourNonShift->total_minutes,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } else {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => null,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            }
                        } elseif ($getShift == '2') {
                            if ($data->scan_date) {
                                if ($existingData->start_work) {
                                    if ($getDesc == 'TA') {
                                        if ($scanDateTime > $startWorkUserTime) {
                                            TestingAbsen::whereNotNull('start_work')
                                                ->where('user_id', $nik)
                                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                                ->where('start_work', '!=', $data->scan_date)
                                                ->where('desc', 'TA')
                                                ->where('hadir', '1')
                                                ->update([
                                                    'end_work' => $data->scan_date,
                                                    'end_work_info' => $data->sn,
                                                    'desc' => 'L',
                                                ]);
                                        } else {
                                            TestingAbsen::whereNotNull('start_work')
                                                ->where('user_id', $nik)
                                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                                ->where('start_work', '!=', $data->scan_date)
                                                ->where('desc', 'TA')
                                                ->update([
                                                    'end_work' => $data->scan_date,
                                                    'end_work_info' => $data->sn,
                                                    'desc' => 'H',
                                                ]);
                                        }
                                    } elseif ($getDesc == 'IP') {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'IP')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'IP',
                                            ]);
                                    } elseif ($getDesc == 'D') {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'D')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'D',
                                            ]);
                                    }
                                } else {
                                    if ($getDesc == null) {
                                        TestingAbsen::whereNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->whereNull('desc')
                                            ->update([
                                                'start_work' => $data->scan_date,
                                                'start_work_info' => $data->sn,
                                                'desc' => 'TA',
                                                'hadir' => '1',
                                            ]);
                                    } elseif ($getDesc == 'IP') {
                                        TestingAbsen::whereNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('desc', 'IP')
                                            ->where('hadir', '1')
                                            ->update([
                                                'start_work' => $data->scan_date,
                                                'start_work_info' => $data->sn,
                                            ]);
                                    }
                                }
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'desc' => 'M',
                                        'hadir' => '0',
                                    ]);
                            }

                            $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->select([
                                    'test_absen_regs.date as date',
                                    DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                    DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "14:05:00")))) ELSE 0 END) as late_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"14:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"14:05:00")))) ELSE 0 END) as late_hours'),
                                ])
                                ->first();

                            if ($getDesc == 'H') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'H')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'L') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'L')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'D') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'D')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'IP') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'IP')
                                    ->update([
                                        'total_hour' => $totalHourNonShift->total_hours,
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => $totalHourNonShift->overtime_hour,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } elseif ($getDesc == 'MX') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'MX')
                                    ->where('hadir', 1)
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => $totalHourNonShift->total_hours,
                                        'overtime_minute' => $totalHourNonShift->total_minutes,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } else {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => null,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            }
                        } elseif ($getShift == '3') {
                            if ($data->scan_date) {
                                if ($existingData->start_work) {

                                    // Sub day scan date
                                    $absentDate = Carbon::parse($data->scan_date)->subDay()->format('Y-m-d');

                                    // Cek data H-1
                                    $existingEntryA = TestingAbsen::where('user_id', $data->nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($absentDate)))
                                        ->first();

                                    // Cek data hari H
                                    $existingEntryB = TestingAbsen::where('user_id', $data->nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->first();

                                    // Get end work
                                    $endWorkInjury = TestingAbsen::where('user_id', $data->nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->value('end_work');

                                    // Get start work
                                    $startWorkInjury = TestingAbsen::where('user_id', $data->nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->value('start_work');

                                    if ($existingEntryA && !$existingEntryB) {
                                        $cekShift = ShiftArchive::where('nik', $data->nik)
                                            ->whereDate('start_date', '<=', $absentDate)
                                            ->whereDate('end_date', '>=', $absentDate)
                                            ->value('shift');
                                        if ($cekShift == '3') {
                                            $endWorkCheck = $existingEntryA->end_work;
                                            if ($endWorkCheck == null) {
                                                if ($getDesc == 'TA') {
                                                    if ($scanDateTime > $startWorkUserTime) {
                                                        TestingAbsen::whereNotNull('start_work')
                                                            ->where('user_id', $nik)
                                                            ->whereDate('date', '=', $absentDate)
                                                            ->where('start_work', '!=', $data->scan_date)
                                                            ->where('desc', 'TA')
                                                            ->where('hadir', '1')
                                                            ->update([
                                                                'end_work' => $data->scan_date,
                                                                'end_work_info' => $data->sn,
                                                                'desc' => 'L',
                                                            ]);
                                                    } else {
                                                        TestingAbsen::whereNotNull('start_work')
                                                            ->where('user_id', $nik)
                                                            ->whereDate('date', '=', $absentDate)
                                                            ->where('start_work', '!=', $data->scan_date)
                                                            ->where('desc', 'TA')
                                                            ->update([
                                                                'end_work' => $data->scan_date,
                                                                'end_work_info' => $data->sn,
                                                                'desc' => 'H',
                                                            ]);
                                                    }
                                                } elseif ($getDesc == 'IP') {
                                                    TestingAbsen::whereNotNull('start_work')
                                                        ->where('user_id', $nik)
                                                        ->whereDate('date', '=', $absentDate)
                                                        ->where('start_work', '!=', $data->scan_date)
                                                        ->where('desc', 'IP')
                                                        ->where('hadir', '1')
                                                        ->update([
                                                            'end_work' => $data->scan_date,
                                                            'end_work_info' => $data->sn,
                                                            'desc' => 'IP',
                                                        ]);
                                                } elseif ($getDesc == 'D') {
                                                    TestingAbsen::whereNotNull('start_work')
                                                        ->where('user_id', $nik)
                                                        ->whereDate('date', '=', $absentDate)
                                                        ->where('start_work', '!=', $data->scan_date)
                                                        ->where('desc', 'D')
                                                        ->where('hadir', '1')
                                                        ->update([
                                                            'end_work' => $data->scan_date,
                                                            'end_work_info' => $data->sn,
                                                            'desc' => 'D',
                                                        ]);
                                                }
                                            } else {
                                                if ($getDesc == null) {
                                                    TestingAbsen::whereNull('start_work')
                                                        ->where('user_id', $nik)
                                                        ->whereDate('date', '=', $absentDate)
                                                        ->whereNull('desc')
                                                        ->update([
                                                            'start_work' => $data->scan_date,
                                                            'start_work_info' => $data->sn,
                                                            'desc' => 'TA',
                                                            'hadir' => '1',
                                                        ]);
                                                } elseif ($getDesc == 'IP') {
                                                    TestingAbsen::whereNull('start_work')
                                                        ->where('user_id', $nik)
                                                        ->whereDate('date', '=', $absentDate)
                                                        ->where('desc', 'IP')
                                                        ->where('hadir', '1')
                                                        ->update([
                                                            'start_work' => $data->scan_date,
                                                            'start_work_info' => $data->sn,
                                                        ]);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                TestingAbsen::whereNull('start_work')
                                    ->where('user_id', $nik)
                                    ->whereNull('end_work')
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNull('desc')
                                    ->update([
                                        'desc' => 'M',
                                        'hadir' => '0',
                                    ]);
                            }

                            $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->select([
                                    'test_absen_regs.date as date',
                                    DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                    DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                    DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "23:05:00")))) ELSE 0 END) as late_minutes'),
                                    DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"23:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"23:05:00")))) ELSE 0 END) as late_hours'),
                                ])
                                ->first();

                            if ($getDesc == 'H') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'H')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'L') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'L')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'D') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'D')
                                    ->update([
                                        'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                        'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                        'late_hour' => $totalHourNonShift->late_hours,
                                        'late_minute' => $totalHourNonShift->late_minutes,
                                    ]);
                            } elseif ($getDesc == 'IP') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'IP')
                                    ->update([
                                        'total_hour' => $totalHourNonShift->total_hours,
                                        'total_minute' => $totalHourNonShift->total_minutes,
                                        'overtime_hour' => $totalHourNonShift->overtime_hour,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } elseif ($getDesc == 'MX') {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->where('desc', 'MX')
                                    ->where('hadir', 1)
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => $totalHourNonShift->total_hours,
                                        'overtime_minute' => $totalHourNonShift->total_minutes,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            } else {
                                TestingAbsen::where('user_id', $nik)
                                    ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                    ->whereNotNull('start_work')
                                    ->whereNotNull('end_work')
                                    ->update([
                                        'total_hour' => null,
                                        'total_minute' => null,
                                        'overtime_hour' => null,
                                        'overtime_minute' => null,
                                        'late_hour' => null,
                                        'late_minute' => null,
                                    ]);
                            }
                        } else {

                        }
                        echo 'Jabatan 3';
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                } elseif ($todayDay == 'Sunday') {
                    if ($data->scan_date) {
                        if ($existingData->start_work) {
                            TestingAbsen::whereNotNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->where('start_work', '!=', $data->scan_date)
                                ->where('desc', 'MX')
                                ->where('hadir', '1')
                                ->update([
                                    'end_work' => $data->scan_date,
                                    'end_work_info' => $data->sn,
                                ]);
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'start_work' => $data->scan_date,
                                    'start_work_info' => $data->sn,
                                    'hadir' => 1,
                                    'desc' => 'MX'
                                ]);
                        }
                    } else {
                        TestingAbsen::whereNull('start_work')
                            ->where('user_id', $nik)
                            ->whereNull('end_work')
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->whereNull('desc')
                            ->update([
                                'desc' => 'MX',
                                'hadir' => '0',
                            ]);
                    }

                    $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                        ->select([
                            'test_absen_regs.date as date',
                            DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                            DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                            DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                            DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "08:05:00")))) ELSE 0 END) as late_minutes'),
                            DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"08:05:00")))) ELSE 0 END) as late_hours'),
                        ])
                        ->first();

                    if ($getDesc == 'MX' && $getHadir == 1) {
                        TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->whereNotNull('start_work')
                            ->whereNotNull('end_work')
                            ->where('desc', 'MX')
                            ->where('hadir', 1)
                            ->update([
                                'total_hour' => null,
                                'total_minute' => null,
                                'overtime_hour' => $totalHourNonShift->total_hours,
                                'overtime_minute' => $totalHourNonShift->total_minutes,
                                'late_hour' => null,
                                'late_minute' => null,
                            ]);
                    } else {
                        TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->whereNotNull('start_work')
                            ->whereNotNull('end_work')
                            ->where('desc', 'MX')
                            ->where('hadir', 0)
                            ->update([
                                'total_hour' => null,
                                'total_minute' => null,
                                'overtime_hour' => null,
                                'overtime_minute' => null,
                                'late_hour' => null,
                                'late_minute' => null,
                            ]);
                    }
                } elseif ($todayDay == 'Friday') {
                    if ($userJabatan == 'Assistant Manager' || $userJabatan == 'Clerk' || $userJabatan == 'Opas') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"12:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 2),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 2),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'TA') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'TA')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($userJabatan == 'Worker WWTP') {
                        if ($getShift == '1') {

                        } elseif ($getShift == '2') {

                        } elseif ($getShift == '3') {

                        } else {

                        }
                        echo 'Jabatan 3';
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN HOUR(TIMEDIFF(end_work, start_work)) - 5 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 6 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                } else {
                    if ($userJabatan == 'Mandor Prosesing' || $userJabatan == 'Worker Proses') {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "10:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"10:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"10:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    } elseif ($userJabatan == 'Worker WWTP') {
                        if ($getShift == '1') {

                        } elseif ($getShift == '2') {

                        } elseif ($getShift == '3') {

                        } else {

                        }
                        echo 'Jabatan 2';
                    } else {
                        if ($data->scan_date) {
                            if ($existingData->start_work) {
                                if ($getDesc == 'TA') {
                                    if ($scanDateTime > $startWorkUserTime) {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->where('hadir', '1')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'L',
                                            ]);
                                    } else {
                                        TestingAbsen::whereNotNull('start_work')
                                            ->where('user_id', $nik)
                                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                            ->where('start_work', '!=', $data->scan_date)
                                            ->where('desc', 'TA')
                                            ->update([
                                                'end_work' => $data->scan_date,
                                                'end_work_info' => $data->sn,
                                                'desc' => 'H',
                                            ]);
                                    }
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'IP',
                                        ]);
                                } elseif ($getDesc == 'D') {
                                    TestingAbsen::whereNotNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('start_work', '!=', $data->scan_date)
                                        ->where('desc', 'D')
                                        ->where('hadir', '1')
                                        ->update([
                                            'end_work' => $data->scan_date,
                                            'end_work_info' => $data->sn,
                                            'desc' => 'D',
                                        ]);
                                }
                            } else {
                                if ($getDesc == null) {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->whereNull('desc')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                            'desc' => 'TA',
                                            'hadir' => '1',
                                        ]);
                                } elseif ($getDesc == 'IP') {
                                    TestingAbsen::whereNull('start_work')
                                        ->where('user_id', $nik)
                                        ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                        ->where('desc', 'IP')
                                        ->where('hadir', '1')
                                        ->update([
                                            'start_work' => $data->scan_date,
                                            'start_work_info' => $data->sn,
                                        ]);
                                }
                            }
                        } else {
                            TestingAbsen::whereNull('start_work')
                                ->where('user_id', $nik)
                                ->whereNull('end_work')
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNull('desc')
                                ->update([
                                    'desc' => 'M',
                                    'hadir' => '0',
                                ]);
                        }

                        $totalHourNonShift = TestingAbsen::where('user_id', $nik)
                            ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                            ->select([
                                'test_absen_regs.date as date',
                                DB::raw('SUM(HOUR(TIMEDIFF(end_work, start_work))) as total_hours'),
                                DB::raw('SUM(MINUTE(TIMEDIFF(end_work, start_work))) as total_minutes'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN HOUR(TIMEDIFF(end_work, start_work)) - 7 ELSE 0 END) as overtime_hour'),
                                DB::raw('SUM(CASE WHEN HOUR(TIMEDIFF(end_work, start_work)) > 7 THEN MINUTE(TIMEDIFF(end_work, start_work)) ELSE 0 END) as overtime_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(start_work, CONCAT(date, " ", "07:05:00")))) ELSE 0 END) as late_minutes'),
                                DB::raw('SUM(CASE WHEN TIME(start_work) > TIME(CONCAT(date, " " ,"07:05:00")) THEN FLOOR(HOUR(TIMEDIFF(start_work, CONCAT(date, " " ,"07:05:00")))) ELSE 0 END) as late_hours'),
                            ])
                            ->first();

                        if ($getDesc == 'H') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'H')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'L') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'L')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'D') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'D')
                                ->update([
                                    'total_hour' => max(0, $totalHourNonShift->total_hours - 1),
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => max(0, $totalHourNonShift->overtime_hour - 1),
                                    'overtime_minute' => $totalHourNonShift->overtime_minutes,
                                    'late_hour' => $totalHourNonShift->late_hours,
                                    'late_minute' => $totalHourNonShift->late_minutes,
                                ]);
                        } elseif ($getDesc == 'IP') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'IP')
                                ->update([
                                    'total_hour' => $totalHourNonShift->total_hours,
                                    'total_minute' => $totalHourNonShift->total_minutes,
                                    'overtime_hour' => $totalHourNonShift->overtime_hour,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } elseif ($getDesc == 'MX') {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->where('desc', 'MX')
                                ->where('hadir', 1)
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => $totalHourNonShift->total_hours,
                                    'overtime_minute' => $totalHourNonShift->total_minutes,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        } else {
                            TestingAbsen::where('user_id', $nik)
                                ->whereDate('date', '=', date('Y-m-d', strtotime($data->scan_date)))
                                ->whereNotNull('start_work')
                                ->whereNotNull('end_work')
                                ->update([
                                    'total_hour' => null,
                                    'total_minute' => null,
                                    'overtime_hour' => null,
                                    'overtime_minute' => null,
                                    'late_hour' => null,
                                    'late_minute' => null,
                                ]);
                        }
                    }
                }
            } else {
                echo 'Kebun';
            }
        }
    }

    public function att_log_archive(Request $request)
    {
        $dayNow = Carbon::now()->format('Y-m-d');
        $firstDate = Carbon::parse($dayNow)->subDays(14)->format('Y-m-d');
        $lastDate = Carbon::parse($dayNow)->subDays(7)->format('Y-m-d');
        $attLogData = TestingKitaServer::whereDate('scan_date', '>=', $firstDate)
            ->whereDate('scan_date', '<=', $lastDate)
            ->select('id', 'nik', 'scan_date', 'sn', 'verifymode', 'inoutmode', 'device_ip')
            ->get();

        if ($attLogData) {
            foreach ($attLogData as $ald) {
                $attLogDataArchive = AttLogArchive::create([
                    'sn' => $ald->sn,
                    'scan_date' => $ald->scan_date,
                    'nik' => $ald->nik,
                    'verifymode' => $ald->verifymode,
                    'inoutmode' => $ald->inoutmode,
                    'device_ip' => $ald->device_ip,
                ]);

                if ($attLogDataArchive) {
                    TestingKitaServer::whereDate('scan_date', '>=', $firstDate)
                        ->whereDate('scan_date', '<=', $lastDate)
                        ->delete();
                }
            }
        }

        return response()->json(['message' => 'Data berhasil diarsipkan.'], 200);
    }

    public function absen_regs_archive(Request $request)
    {
        $dayNow = Carbon::now()->format('Y-m-d');
        $firstDate = Carbon::parse($dayNow)->subDays(14)->format('Y-m-d');
        $lastDate = Carbon::parse($dayNow)->subDays(7)->format('Y-m-d');
        $absenRegsData = TestingAbsen::whereDate('date', '>=', $firstDate)
            ->whereDate('date', '<=', $lastDate)
            ->get();

        if ($absenRegsData) {
            foreach ($absenRegsData as $ard) {
                TestingArchive::create([
                    'user_id' => $ard->user_id,
                    'date' => $ard->date,
                    'start_work' => $ard->start_work,
                    'start_work_info' => $ard->start_work_info,
                    'start_work_info_url' => $ard->start_work_info_url,
                    'end_work' => $ard->end_work,
                    'end_work_info' => $ard->end_work_info,
                    'end_work_info_url' => $ard->end_work_info_url,
                    'total_hour' => $ard->total_hour,
                    'total_minute' => $ard->total_minute,
                    'overtime_hour' => $ard->overtime_hour,
                    'overtime_minute' => $ard->overtime_minute,
                    'late_hour' => $ard->late_hour,
                    'late_minute' => $ard->late_minute,
                    'desc' => $ard->desc,
                    'hadir' => $ard->hadir,
                    'shift' => $ard->shift,
                    'info' => $ard->info,
                    'link' => $ard->link,
                    'checked' => $ard->checked,
                    'checked_by' => $ard->checked_by,
                    'approval' => $ard->approval,
                    'approval_by' => $ard->approval_by,
                ]);
            }
        }

        return response()->json(['message' => 'Data berhasil diarsipkan.'], 200);
    }

    public function update_calc_shift(Request $request)
    {
        $start = $request->start;
        $end = $request->end;

        $absens = DB::table('test_absen_regs')
            ->join('users', 'test_absen_regs.user_id', '=', 'users.nik')
            ->join('master_shifts', 'master_shifts.id', '=', 'test_absen_regs.shift')
            ->whereBetween('test_absen_regs.date', [$start, $end])
            ->where('users.dept', 'Factory')
            ->whereIn('users.status', ['Contract', 'Regular'])
            ->whereIn('test_absen_regs.desc', ['H', 'L'])
            ->select([
                'test_absen_regs.date as date',
                'test_absen_regs.user_id',
                'test_absen_regs.id',
                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_hour'),
                DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 7 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 7 ELSE 0 END as overtime_minutes'),
                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " ", master_shifts.start_work)))) ELSE 0 END as late_minutes'),
                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(date, " " ,master_shifts.start_work)) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(date, " " ,master_shifts.start_work)))) ELSE 0 END as late_hours'),

            ])
            ->get();

        // DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
        //     DB::raw('MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_minutes'),
        //     DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 8 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 8 ELSE 0 END as overtime_hour'),
        //     DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 8 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 8 ELSE 0 END as overtime_minutes'),
        //     DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(test_absen_regs.date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(test_absen_regs.date, " ", "08:05:00")))) ELSE 0 END as late_minutes'),
        //     DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(test_absen_regs.date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(test_absen_regs.date, " " ,"08:05:00")))) ELSE 0 END as late_hours'),

        foreach ($absens as $key => $absen) {
            DB::table('test_absen_regs')->where('id', $absen->id)->update([
                'total_hour' => $absen->total_hours,
                'total_minute' => $absen->total_minutes,
                'overtime_hour' => $absen->overtime_hour,
                'overtime_minute' => $absen->overtime_minutes,
                'late_hour' => $absen->late_hours,
                'late_minute' => $absen->late_minutes,
            ]);
        }

        set_time_limit(0);

        return Redirect::back();
    }

    public function update_calc(Request $request)
    {
        $start = $request->start;
        $end = $request->end;

        $absens = DB::table('test_absen_regs')
            ->join('users', 'test_absen_regs.user_id', '=', 'users.nik')
            ->whereBetween('test_absen_regs.date', [$start, $end])
            ->whereNot('users.dept', 'Factory')
            ->select([
                'test_absen_regs.date as date',
                'test_absen_regs.user_id',
                'test_absen_regs.id',
                DB::raw('HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) as total_hours'),
                DB::raw('FLOOR(MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work))) as total_minutes'),
                DB::raw('CASE WHEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 8 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 8 ELSE 0 END as overtime_hour'),
                DB::raw('CASE WHEN MINUTE(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) > 8 THEN HOUR(TIMEDIFF(test_absen_regs.end_work, test_absen_regs.start_work)) - 8 ELSE 0 END as overtime_minutes'),
                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(test_absen_regs.date, " " ,"08:05:00")) THEN FLOOR(MINUTE(TIMEDIFF(test_absen_regs.start_work, CONCAT(test_absen_regs.date, " ", "08:05:00")))) ELSE 0 END as late_minutes'),
                DB::raw('CASE WHEN TIME(test_absen_regs.start_work) > TIME(CONCAT(test_absen_regs.date, " " ,"08:05:00")) THEN FLOOR(HOUR(TIMEDIFF(test_absen_regs.start_work, CONCAT(test_absen_regs.date, " " ,"08:05:00")))) ELSE 0 END as late_hours'),
            ])
            ->get();

        foreach ($absens as $key => $absen) {
            DB::table('test_absen_regs')->where('id', $absen->id)->update([
                'total_hour' => $absen->total_hours,
                'total_minute' => $absen->total_minutes,
                'overtime_hour' => $absen->overtime_hour,
                'overtime_minute' => $absen->overtime_minutes,
                'late_hour' => $absen->late_hours,
                'late_minute' => $absen->late_minutes,
            ]);
        }

        return Redirect::back();
    }

    public function export_sequel(Request $request)
    {
        // $date = Carbon::now()->format('Y-m-d');
        // $date = Carbon::now();
        $date = '2023-11-30';
        $startDate = Carbon::parse($date)->firstOfMonth()->format('Y-m-d');
        $endDate = Carbon::parse($date)->endOfMonth()->format('Y-m-d');

        // $startDate = $request->input('start');
        // $endDate = $request->input('end');

        if ($date == $endDate) {

            $dateNew = Carbon::parse($date)->addDay()->format('Y-m-d');
            $startDateNewA = Carbon::parse($dateNew)->firstOfMonth()->format('Y-m-d');
            $startDateNew = Carbon::parse($dateNew)->firstOfMonth();
            $lastDateNew = Carbon::parse($startDateNew)->endOfMonth();

            if ($dateNew == $startDateNewA) {
                $nik = User::select('nik')->get();

                $period = CarbonPeriod::create($startDateNew, $lastDateNew);
                foreach ($period as $date) {
                    $dates[] = $date->format('Y-m-d');
                }

                foreach ($nik as $user) {
                    foreach ($dates as $date) {
                        TestingAbsen::firstOrCreate([
                            'user_id' => $user->nik,
                            'date' => $date,
                        ]);
                    }
                }
            }

            $filename = "absen_regs_{$startDate}_to_{$endDate}.sql";

            $sql = "INSERT INTO `test_absen_regs` (`id`, `user_id`, `date`, `start_work`, `start_work_info`, `start_work_info_url`, `end_work`, `end_work_info`, `end_work_info_url`, `total_hour`, `total_minute`, `overtime_hour`, `overtime_minute`, `late_hour`, `late_minute`, `desc`, `hadir`, `shift`, `info`, `link`, `checked`, `checked_by`, `approval`, `approval_by`, `created_at`, `updated_at`, `sn`) VALUES \n";

            $data = TestingAbsen::whereBetween('date', [$startDate, $endDate])->get();
            foreach ($data as $index => $row) {
                $sql .= "(NULL ,'{$row->user_id}', '{$row->date}', ";

                $sql .= $row->start_work !== null ? "'{$row->start_work}'" : 'NULL';

                $sql .= $row->start_work_info !== null ? ", '{$row->start_work_info}'" : ', NULL';

                $sql .= $row->start_work_info_url !== null ? ", '{$row->start_work_info_url}'" : ', NULL';

                $sql .= $row->end_work !== null ? ", '{$row->end_work}'" : ', NULL';

                $sql .= $row->end_work_info !== null ? ", '{$row->end_work_info}'" : ', NULL';

                $sql .= $row->end_work_info_url !== null ? ", '{$row->end_work_info_url}'" : ', NULL';

                $sql .= $row->total_hour !== null ? ", {$row->total_hour}" : ', NULL';

                $sql .= $row->total_minute !== null ? ", {$row->total_minute}" : ', NULL';

                $sql .= $row->overtime_hour !== null ? ", {$row->overtime_hour}" : ', NULL';

                $sql .= $row->overtime_minute !== null ? ", {$row->overtime_minute}" : ', NULL';

                $sql .= $row->late_hour !== null ? ", {$row->late_hour}" : ', NULL';

                $sql .= $row->late_minute !== null ? ", {$row->late_minute}" : ', NULL';

                $sql .= ", '{$row->desc}'";

                $sql .= $row->hadir !== null ? ", {$row->hadir}" : ', NULL';

                $sql .= $row->shift !== null ? ", {$row->shift}" : ', NULL';

                $sql .= $row->info !== null ? ", '{$row->info}'" : ', NULL';

                $sql .= $row->link !== null ? ", '{$row->link}'" : ', NULL';

                $sql .= $row->checked !== null ? ", '{$row->checked}'" : ', NULL';

                $sql .= $row->checked_by !== null ? ", '{$row->checked_by}'" : ', NULL';

                $sql .= $row->approval !== null ? ", '{$row->approval}'" : ', NULL';

                $sql .= $row->approval_by !== null ? ", '{$row->approval_by}'" : ', NULL';

                $sql .= $row->created_at !== null ? ", '{$row->created_at}'" : ', NULL';

                $sql .= $row->updated_at !== null ? ", '{$row->updated_at}'" : ', NULL';

                $sql .= $row->sn !== null ? ", '{$row->sn}'" : ', NULL';

                if ($index === count($data) - 1) {
                    $sql .= ");\n";
                } else {
                    $sql .= "),\n";
                }
            }

            $sql = rtrim($sql);

            $isStored = Storage::disk('local')->put("sql_exports/$filename", $sql);

            if ($isStored) {
                TestingAbsen::whereBetween('date', [$startDate, $endDate])->delete();
            }
        }

        // $startDate = $request->input('start');
        // $endDate = $request->input('end');

        // $filename = "absen_regs_{$startDate}_to_{$endDate}.sql";

        // $sql = "INSERT INTO `test_absen_regs` (`id`, `user_id`, `date`, `start_work`, `start_work_info`, `start_work_info_url`, `end_work`, `end_work_info`, `end_work_info_url`, `total_hour`, `total_minute`, `overtime_hour`, `overtime_minute`, `late_hour`, `late_minute`, `desc`, `hadir`, `shift`, `info`, `link`, `checked`, `checked_by`, `approval`, `approval_by`, `created_at`, `updated_at`, `sn`) VALUES \n";

        // $data = TestingAbsen::whereBetween('date', [$startDate, $endDate])->get();
        // foreach ($data as $index => $row) {
        //     $sql .= "(NULL ,'{$row->user_id}', '{$row->date}', ";

        //     $sql .= $row->start_work !== null ? "'{$row->start_work}'" : 'NULL';

        //     $sql .= $row->start_work_info !== null ? ", '{$row->start_work_info}'" : ', NULL';

        //     $sql .= $row->start_work_info_url !== null ? ", '{$row->start_work_info_url}'" : ', NULL';

        //     $sql .= $row->end_work !== null ? ", '{$row->end_work}'" : ', NULL';

        //     $sql .= $row->end_work_info !== null ? ", '{$row->end_work_info}'" : ', NULL';

        //     $sql .= $row->end_work_info_url !== null ? ", '{$row->end_work_info_url}'" : ', NULL';

        //     $sql .= $row->total_hour !== null ? ", {$row->total_hour}" : ', NULL';

        //     $sql .= $row->total_minute !== null ? ", {$row->total_minute}" : ', NULL';

        //     $sql .= $row->overtime_hour !== null ? ", {$row->overtime_hour}" : ', NULL';

        //     $sql .= $row->overtime_minute !== null ? ", {$row->overtime_minute}" : ', NULL';

        //     $sql .= $row->late_hour !== null ? ", {$row->late_hour}" : ', NULL';

        //     $sql .= $row->late_minute !== null ? ", {$row->late_minute}" : ', NULL';

        //     $sql .= ", '{$row->desc}'";

        //     $sql .= $row->hadir !== null ? ", {$row->hadir}" : ', NULL';

        //     $sql .= $row->shift !== null ? ", {$row->shift}" : ', NULL';

        //     $sql .= $row->info !== null ? ", '{$row->info}'" : ', NULL';

        //     $sql .= $row->link !== null ? ", '{$row->link}'" : ', NULL';

        //     $sql .= $row->checked !== null ? ", '{$row->checked}'" : ', NULL';

        //     $sql .= $row->checked_by !== null ? ", '{$row->checked_by}'" : ', NULL';

        //     $sql .= $row->approval !== null ? ", '{$row->approval}'" : ', NULL';

        //     $sql .= $row->approval_by !== null ? ", '{$row->approval_by}'" : ', NULL';

        //     $sql .= $row->created_at !== null ? ", '{$row->created_at}'" : ', NULL';

        //     $sql .= $row->updated_at !== null ? ", '{$row->updated_at}'" : ', NULL';

        //     $sql .= $row->sn !== null ? ", '{$row->sn}'" : ', NULL';

        //     if ($index === count($data) - 1) {
        //         $sql .= ");\n";
        //     } else {
        //         $sql .= "),\n";
        //     }
        // }

        // $sql = rtrim($sql);

        // Storage::disk('local')->put("sql_exports/$filename", $sql);

        // dd($date, $startDate, $endDate, $dateNew, $startDateNew, $lastDateNew);
        return response()->json(['message' => 'Data berhasil diperbarui.'], 200);
    }

    public function delete_att_data(Request $request)
    {
        // $date = Carbon::now();
        // $date = '2023-12-31';
        // $date = Carbon::now()->format('Y-m-d');
        // $startDate = Carbon::parse($date)->firstOfMonth()->format('Y-m-d');
        // $endDate = Carbon::parse($date)->endOfMonth()->format('Y-m-d');

        $startDate = $request->input('start_del');
        $endDate = $request->input('end_del');

        $delAttData = TestingAbsen::whereBetween('date', [$startDate, $endDate])->delete();

        if ($delAttData) {
            return "Hapus data berhasil";
        } else {
            return "Hapus data tidak berhasil";
        }
    }

    public function table_att_data()
    {
        // $data = TestingKitaServer::select('nik')->groupby('nik')->get();

        // foreach($data as $emp) {
        //     $emp = User::where('nik', $emp->nik)
        //         ->orwhere('absent_code', $emp->nik)
        //         ->get();
        // }

        $data = DB::table('users')
            ->join('test_absen_regs', 'users.nik', '=', 'test_absen_regs.user_id')
            ->select(
                'users.nik',
                'users.name',
                'users.status',
                'users.dept',
                'users.jabatan',
            )
            ->where('users.active', 'yes')
            ->groupBy('test_absen_regs.user_id')
            ->get();

            dd($data);

        return view('admin.pages.testing.table-att-data', compact('data'));
    }

}
